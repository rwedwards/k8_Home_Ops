apiVersion: v1
items:
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: 8e34992de1fcf5b99cecc3947c986f63f90249ed3b7f35a5b9a50d597af03e74
      cni.projectcalico.org/podIP: 10.244.128.132/32
      cni.projectcalico.org/podIPs: 10.244.128.132/32
      prometheus.io/path: /metrics
      prometheus.io/port: "9402"
      prometheus.io/scrape: "true"
    creationTimestamp: "2025-07-16T22:29:59Z"
    generateName: cert-manager-76f8897d9-
    labels:
      app: cert-manager
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/version: v1.14.4
      helm.sh/chart: cert-manager-v1.14.4
      pod-template-hash: 76f8897d9
    name: cert-manager-76f8897d9-62945
    namespace: cert-manager
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: cert-manager-76f8897d9
      uid: 741e997e-5a2c-476f-9cee-0f809fed4a2f
    resourceVersion: "6065"
    uid: d2851ddb-599d-4ea1-b445-8db1513999d9
  spec:
    containers:
    - args:
      - --v=2
      - --cluster-resource-namespace=$(POD_NAMESPACE)
      - --leader-election-namespace=kube-system
      - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.14.4
      - --max-concurrent-challenges=60
      env:
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: quay.io/jetstack/cert-manager-controller:v1.14.4
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 8
        httpGet:
          path: /livez
          port: http-healthz
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 15
      name: cert-manager-controller
      ports:
      - containerPort: 9402
        name: http-metrics
        protocol: TCP
      - containerPort: 9403
        name: http-healthz
        protocol: TCP
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-lwf2n
        readOnly: true
    dnsConfig:
      nameservers:
      - 1.1.1.1
      - 8.8.8.8
    dnsPolicy: None
    enableServiceLinks: false
    nodeName: electra
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      runAsNonRoot: true
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: cert-manager
    serviceAccountName: cert-manager
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-lwf2n
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-07-16T22:30:00Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-07-16T22:29:59Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-07-16T22:30:00Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-07-16T22:30:00Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-07-16T22:29:59Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://3ba603166b52b30fc6b072381986e76459bbe367a990d52c23002dbb5e4c3113
      image: quay.io/jetstack/cert-manager-controller:v1.14.4
      imageID: quay.io/jetstack/cert-manager-controller@sha256:5cffa969fd30ce6a760994d30e7cccb3626abc8015d813de52f8cfa9ff862de9
      lastState: {}
      name: cert-manager-controller
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-07-16T22:29:59Z"
    hostIP: 192.168.11.11
    hostIPs:
    - ip: 192.168.11.11
    phase: Running
    podIP: 10.244.128.132
    podIPs:
    - ip: 10.244.128.132
    qosClass: BestEffort
    startTime: "2025-07-16T22:29:59Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: b3f24a186d86c1f60c0a6f07a1eeb84f513413eee67ebd53590a6d8b70c6c869
      cni.projectcalico.org/podIP: 10.244.89.196/32
      cni.projectcalico.org/podIPs: 10.244.89.196/32
    creationTimestamp: "2025-07-16T22:18:07Z"
    generateName: cert-manager-cainjector-7ff5b598bc-
    labels:
      app: cainjector
      app.kubernetes.io/component: cainjector
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cainjector
      app.kubernetes.io/version: v1.14.4
      helm.sh/chart: cert-manager-v1.14.4
      pod-template-hash: 7ff5b598bc
    name: cert-manager-cainjector-7ff5b598bc-dwc62
    namespace: cert-manager
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: cert-manager-cainjector-7ff5b598bc
      uid: 3f6756cf-200e-41f4-96e2-7c27e8c57fa3
    resourceVersion: "4655"
    uid: c1dcf25d-8fae-450f-8d14-5ed84eabe0b3
  spec:
    containers:
    - args:
      - --v=2
      - --leader-election-namespace=kube-system
      env:
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: quay.io/jetstack/cert-manager-cainjector:v1.14.4
      imagePullPolicy: IfNotPresent
      name: cert-manager-cainjector
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-rrb72
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: false
    nodeName: taygete
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      runAsNonRoot: true
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: cert-manager-cainjector
    serviceAccountName: cert-manager-cainjector
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-rrb72
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-07-16T22:18:14Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-07-16T22:18:07Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-07-16T22:18:14Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-07-16T22:18:14Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-07-16T22:18:07Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://97abc21f7106dba563fec24f52e258acd54088ebf00f4cb7b5635012787f76fd
      image: quay.io/jetstack/cert-manager-cainjector:v1.14.4
      imageID: quay.io/jetstack/cert-manager-cainjector@sha256:30286297e5b4b71a86759d297a8109c6a1649fdc68d28f618d87edf12a2da417
      lastState: {}
      name: cert-manager-cainjector
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-07-16T22:18:13Z"
    hostIP: 192.168.11.12
    hostIPs:
    - ip: 192.168.11.12
    phase: Running
    podIP: 10.244.89.196
    podIPs:
    - ip: 10.244.89.196
    qosClass: BestEffort
    startTime: "2025-07-16T22:18:07Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: c69df6b6f1159d6d8a464e7f40df58a314b762923bad01220dc8908d097abbae
      cni.projectcalico.org/podIP: 10.244.89.195/32
      cni.projectcalico.org/podIPs: 10.244.89.195/32
    creationTimestamp: "2025-07-16T22:18:07Z"
    generateName: cert-manager-webhook-64dfbdfbfc-
    labels:
      app: webhook
      app.kubernetes.io/component: webhook
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: webhook
      app.kubernetes.io/version: v1.14.4
      helm.sh/chart: cert-manager-v1.14.4
      pod-template-hash: 64dfbdfbfc
    name: cert-manager-webhook-64dfbdfbfc-4vnnj
    namespace: cert-manager
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: cert-manager-webhook-64dfbdfbfc
      uid: e2f74878-b7ec-424d-b661-4506340f9fa7
    resourceVersion: "4661"
    uid: 16784327-7e4b-4af9-9d71-e063a4393a35
  spec:
    containers:
    - args:
      - --v=2
      - --secure-port=10250
      - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
      - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
      - --dynamic-serving-dns-names=cert-manager-webhook
      - --dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE)
      - --dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE).svc
      env:
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      image: quay.io/jetstack/cert-manager-webhook:v1.14.4
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /livez
          port: 6080
          scheme: HTTP
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: cert-manager-webhook
      ports:
      - containerPort: 10250
        name: https
        protocol: TCP
      - containerPort: 6080
        name: healthcheck
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 6080
          scheme: HTTP
        initialDelaySeconds: 5
        periodSeconds: 5
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-64fvf
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: false
    nodeName: taygete
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      runAsNonRoot: true
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: cert-manager-webhook
    serviceAccountName: cert-manager-webhook
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-64fvf
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-07-16T22:18:12Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-07-16T22:18:07Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-07-16T22:18:17Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-07-16T22:18:17Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-07-16T22:18:07Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://bc6cf9068f50ca9fdb015a4714df87e8d7409dc721a5003364247cebb5a3db2a
      image: quay.io/jetstack/cert-manager-webhook:v1.14.4
      imageID: quay.io/jetstack/cert-manager-webhook@sha256:11f7e7c462da3c0329e0a1e695a7bd37d6b3c28312d4edd4cc8d36f70ecbfa63
      lastState: {}
      name: cert-manager-webhook
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-07-16T22:18:11Z"
    hostIP: 192.168.11.12
    hostIPs:
    - ip: 192.168.11.12
    phase: Running
    podIP: 10.244.89.195
    podIPs:
    - ip: 10.244.89.195
    qosClass: BestEffort
    startTime: "2025-07-16T22:18:07Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: 7f6b66050de23cea379a380d5e37cb47134a3ca7d4ee1c0348fed29a85181173
      cni.projectcalico.org/podIP: 10.244.89.197/32
      cni.projectcalico.org/podIPs: 10.244.89.197/32
    creationTimestamp: "2025-07-16T22:30:10Z"
    generateName: namecheap-webhook-cert-manager-webhook-namecheap-56cc5fd59d-
    labels:
      app: cert-manager-webhook-namecheap
      pod-template-hash: 56cc5fd59d
      release: namecheap-webhook
    name: namecheap-webhook-cert-manager-webhook-namecheap-56cc5fd59vw6wg
    namespace: cert-manager
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: namecheap-webhook-cert-manager-webhook-namecheap-56cc5fd59d
      uid: 57adbc65-7258-422e-8a86-e7a37c12f7b0
    resourceVersion: "6133"
    uid: 8981fb70-96e1-42fa-9c17-fa48252ac785
  spec:
    containers:
    - args:
      - --tls-cert-file=/tls/tls.crt
      - --tls-private-key-file=/tls/tls.key
      env:
      - name: GROUP_NAME
        value: acme.sleepy-puppy.com
      image: ghcr.io/extrality/cert-manager-webhook-namecheap:v0.3.1
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: https
          scheme: HTTPS
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: cert-manager-webhook-namecheap
      ports:
      - containerPort: 443
        name: https
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: https
          scheme: HTTPS
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /tls
        name: certs
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-7p745
        readOnly: true
    dnsConfig:
      nameservers:
      - 1.1.1.1
      - 8.8.8.8
    dnsPolicy: None
    enableServiceLinks: true
    nodeName: taygete
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: namecheap-webhook-cert-manager-webhook-namecheap
    serviceAccountName: namecheap-webhook-cert-manager-webhook-namecheap
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: certs
      secret:
        defaultMode: 420
        secretName: namecheap-webhook-cert-manager-webhook-namecheap-webhook-tls
    - name: kube-api-access-7p745
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-07-16T22:30:12Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-07-16T22:30:10Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-07-16T22:30:13Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-07-16T22:30:13Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-07-16T22:30:10Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://39913078c1527af95cc4fff1785eca6985946274b3dc978c4d5bb9157ed73f73
      image: ghcr.io/extrality/cert-manager-webhook-namecheap:v0.3.1
      imageID: ghcr.io/extrality/cert-manager-webhook-namecheap@sha256:e3552fa0c68a98262303d3c14070b7300075e7b420d6705429646685510a334b
      lastState: {}
      name: cert-manager-webhook-namecheap
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-07-16T22:30:12Z"
    hostIP: 192.168.11.12
    hostIPs:
    - ip: 192.168.11.12
    phase: Running
    podIP: 10.244.89.197
    podIPs:
    - ip: 10.244.89.197
    qosClass: BestEffort
    startTime: "2025-07-16T22:30:10Z"
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: cert-manager
    creationTimestamp: "2025-07-16T22:18:07Z"
    labels:
      app: cert-manager
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/version: v1.14.4
      helm.sh/chart: cert-manager-v1.14.4
    name: cert-manager
    namespace: cert-manager
    resourceVersion: "4536"
    uid: 5bee1069-60ad-4816-bf78-936f9a7e4f26
  spec:
    clusterIP: 10.97.102.17
    clusterIPs:
    - 10.97.102.17
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: tcp-prometheus-servicemonitor
      port: 9402
      protocol: TCP
      targetPort: 9402
    selector:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/name: cert-manager
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: cert-manager
    creationTimestamp: "2025-07-16T22:18:07Z"
    labels:
      app: webhook
      app.kubernetes.io/component: webhook
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: webhook
      app.kubernetes.io/version: v1.14.4
      helm.sh/chart: cert-manager-v1.14.4
    name: cert-manager-webhook
    namespace: cert-manager
    resourceVersion: "4531"
    uid: 7a6e2051-f661-49c3-93d8-ca5df4e0863c
  spec:
    clusterIP: 10.97.175.96
    clusterIPs:
    - 10.97.175.96
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: https
      port: 443
      protocol: TCP
      targetPort: https
    selector:
      app.kubernetes.io/component: webhook
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/name: webhook
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: namecheap-webhook
      meta.helm.sh/release-namespace: cert-manager
    creationTimestamp: "2025-07-16T22:28:54Z"
    labels:
      app: cert-manager-webhook-namecheap
      app.kubernetes.io/managed-by: Helm
      chart: cert-manager-webhook-namecheap-0.2.2
      heritage: Helm
      release: namecheap-webhook
    name: namecheap-webhook-cert-manager-webhook-namecheap
    namespace: cert-manager
    resourceVersion: "5822"
    uid: 2778fea2-341f-4508-8d57-bde5f97c6042
  spec:
    clusterIP: 10.105.79.151
    clusterIPs:
    - 10.105.79.151
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: https
      port: 443
      protocol: TCP
      targetPort: https
    selector:
      app: cert-manager-webhook-namecheap
      release: namecheap-webhook
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "2"
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: cert-manager
    creationTimestamp: "2025-07-16T22:18:07Z"
    generation: 2
    labels:
      app: cert-manager
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/version: v1.14.4
      helm.sh/chart: cert-manager-v1.14.4
    name: cert-manager
    namespace: cert-manager
    resourceVersion: "6081"
    uid: a67c6d22-0565-4308-817c-d0d516887f18
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/name: cert-manager
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          prometheus.io/path: /metrics
          prometheus.io/port: "9402"
          prometheus.io/scrape: "true"
        creationTimestamp: null
        labels:
          app: cert-manager
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: cert-manager
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: cert-manager
          app.kubernetes.io/version: v1.14.4
          helm.sh/chart: cert-manager-v1.14.4
      spec:
        containers:
        - args:
          - --v=2
          - --cluster-resource-namespace=$(POD_NAMESPACE)
          - --leader-election-namespace=kube-system
          - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.14.4
          - --max-concurrent-challenges=60
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: quay.io/jetstack/cert-manager-controller:v1.14.4
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 8
            httpGet:
              path: /livez
              port: http-healthz
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 15
          name: cert-manager-controller
          ports:
          - containerPort: 9402
            name: http-metrics
            protocol: TCP
          - containerPort: 9403
            name: http-healthz
            protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsConfig:
          nameservers:
          - 1.1.1.1
          - 8.8.8.8
        dnsPolicy: None
        enableServiceLinks: false
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: cert-manager
        serviceAccountName: cert-manager
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2025-07-16T22:18:10Z"
      lastUpdateTime: "2025-07-16T22:18:10Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2025-07-16T22:18:07Z"
      lastUpdateTime: "2025-07-16T22:30:00Z"
      message: ReplicaSet "cert-manager-76f8897d9" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 2
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: cert-manager
    creationTimestamp: "2025-07-16T22:18:07Z"
    generation: 1
    labels:
      app: cainjector
      app.kubernetes.io/component: cainjector
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cainjector
      app.kubernetes.io/version: v1.14.4
      helm.sh/chart: cert-manager-v1.14.4
    name: cert-manager-cainjector
    namespace: cert-manager
    resourceVersion: "4657"
    uid: 56b3c1cb-4fe2-4b0a-97c8-1a5af6d008bf
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/component: cainjector
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/name: cainjector
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: cainjector
          app.kubernetes.io/component: cainjector
          app.kubernetes.io/instance: cert-manager
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: cainjector
          app.kubernetes.io/version: v1.14.4
          helm.sh/chart: cert-manager-v1.14.4
      spec:
        containers:
        - args:
          - --v=2
          - --leader-election-namespace=kube-system
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: quay.io/jetstack/cert-manager-cainjector:v1.14.4
          imagePullPolicy: IfNotPresent
          name: cert-manager-cainjector
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        enableServiceLinks: false
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: cert-manager-cainjector
        serviceAccountName: cert-manager-cainjector
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2025-07-16T22:18:14Z"
      lastUpdateTime: "2025-07-16T22:18:14Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2025-07-16T22:18:07Z"
      lastUpdateTime: "2025-07-16T22:18:14Z"
      message: ReplicaSet "cert-manager-cainjector-7ff5b598bc" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: cert-manager
    creationTimestamp: "2025-07-16T22:18:07Z"
    generation: 1
    labels:
      app: webhook
      app.kubernetes.io/component: webhook
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: webhook
      app.kubernetes.io/version: v1.14.4
      helm.sh/chart: cert-manager-v1.14.4
    name: cert-manager-webhook
    namespace: cert-manager
    resourceVersion: "4665"
    uid: 3056bbe1-f7d7-4377-98db-1866b4b8ad14
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/component: webhook
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/name: webhook
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: webhook
          app.kubernetes.io/component: webhook
          app.kubernetes.io/instance: cert-manager
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: webhook
          app.kubernetes.io/version: v1.14.4
          helm.sh/chart: cert-manager-v1.14.4
      spec:
        containers:
        - args:
          - --v=2
          - --secure-port=10250
          - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
          - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
          - --dynamic-serving-dns-names=cert-manager-webhook
          - --dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE)
          - --dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE).svc
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: quay.io/jetstack/cert-manager-webhook:v1.14.4
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /livez
              port: 6080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: cert-manager-webhook
          ports:
          - containerPort: 10250
            name: https
            protocol: TCP
          - containerPort: 6080
            name: healthcheck
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 6080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        enableServiceLinks: false
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: cert-manager-webhook
        serviceAccountName: cert-manager-webhook
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2025-07-16T22:18:17Z"
      lastUpdateTime: "2025-07-16T22:18:17Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2025-07-16T22:18:07Z"
      lastUpdateTime: "2025-07-16T22:18:17Z"
      message: ReplicaSet "cert-manager-webhook-64dfbdfbfc" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "2"
      meta.helm.sh/release-name: namecheap-webhook
      meta.helm.sh/release-namespace: cert-manager
    creationTimestamp: "2025-07-16T22:28:54Z"
    generation: 2
    labels:
      app: cert-manager-webhook-namecheap
      app.kubernetes.io/managed-by: Helm
      chart: cert-manager-webhook-namecheap-0.2.2
      heritage: Helm
      release: namecheap-webhook
    name: namecheap-webhook-cert-manager-webhook-namecheap
    namespace: cert-manager
    resourceVersion: "6147"
    uid: 20256b26-244c-46a2-8049-5ca18e8e8f0b
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: cert-manager-webhook-namecheap
        release: namecheap-webhook
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: cert-manager-webhook-namecheap
          release: namecheap-webhook
      spec:
        containers:
        - args:
          - --tls-cert-file=/tls/tls.crt
          - --tls-private-key-file=/tls/tls.key
          env:
          - name: GROUP_NAME
            value: acme.sleepy-puppy.com
          image: ghcr.io/extrality/cert-manager-webhook-namecheap:v0.3.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: https
              scheme: HTTPS
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: cert-manager-webhook-namecheap
          ports:
          - containerPort: 443
            name: https
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: https
              scheme: HTTPS
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tls
            name: certs
            readOnly: true
        dnsConfig:
          nameservers:
          - 1.1.1.1
          - 8.8.8.8
        dnsPolicy: None
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: namecheap-webhook-cert-manager-webhook-namecheap
        serviceAccountName: namecheap-webhook-cert-manager-webhook-namecheap
        terminationGracePeriodSeconds: 30
        volumes:
        - name: certs
          secret:
            defaultMode: 420
            secretName: namecheap-webhook-cert-manager-webhook-namecheap-webhook-tls
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2025-07-16T22:29:05Z"
      lastUpdateTime: "2025-07-16T22:29:05Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2025-07-16T22:28:54Z"
      lastUpdateTime: "2025-07-16T22:30:13Z"
      message: ReplicaSet "namecheap-webhook-cert-manager-webhook-namecheap-56cc5fd59d"
        has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 2
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: cert-manager
    creationTimestamp: "2025-07-16T22:18:07Z"
    generation: 2
    labels:
      app: cert-manager
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/version: v1.14.4
      helm.sh/chart: cert-manager-v1.14.4
      pod-template-hash: 5b99654b86
    name: cert-manager-5b99654b86
    namespace: cert-manager
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: cert-manager
      uid: a67c6d22-0565-4308-817c-d0d516887f18
    resourceVersion: "6080"
    uid: 173ddec3-0df3-40ad-8135-dca5d9a234bd
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/name: cert-manager
        pod-template-hash: 5b99654b86
    template:
      metadata:
        annotations:
          prometheus.io/path: /metrics
          prometheus.io/port: "9402"
          prometheus.io/scrape: "true"
        creationTimestamp: null
        labels:
          app: cert-manager
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: cert-manager
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: cert-manager
          app.kubernetes.io/version: v1.14.4
          helm.sh/chart: cert-manager-v1.14.4
          pod-template-hash: 5b99654b86
      spec:
        containers:
        - args:
          - --v=2
          - --cluster-resource-namespace=$(POD_NAMESPACE)
          - --leader-election-namespace=kube-system
          - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.14.4
          - --max-concurrent-challenges=60
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: quay.io/jetstack/cert-manager-controller:v1.14.4
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 8
            httpGet:
              path: /livez
              port: http-healthz
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 15
          name: cert-manager-controller
          ports:
          - containerPort: 9402
            name: http-metrics
            protocol: TCP
          - containerPort: 9403
            name: http-healthz
            protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        enableServiceLinks: false
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: cert-manager
        serviceAccountName: cert-manager
        terminationGracePeriodSeconds: 30
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "2"
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: cert-manager
    creationTimestamp: "2025-07-16T22:29:59Z"
    generation: 1
    labels:
      app: cert-manager
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cert-manager
      app.kubernetes.io/version: v1.14.4
      helm.sh/chart: cert-manager-v1.14.4
      pod-template-hash: 76f8897d9
    name: cert-manager-76f8897d9
    namespace: cert-manager
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: cert-manager
      uid: a67c6d22-0565-4308-817c-d0d516887f18
    resourceVersion: "6068"
    uid: 741e997e-5a2c-476f-9cee-0f809fed4a2f
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/name: cert-manager
        pod-template-hash: 76f8897d9
    template:
      metadata:
        annotations:
          prometheus.io/path: /metrics
          prometheus.io/port: "9402"
          prometheus.io/scrape: "true"
        creationTimestamp: null
        labels:
          app: cert-manager
          app.kubernetes.io/component: controller
          app.kubernetes.io/instance: cert-manager
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: cert-manager
          app.kubernetes.io/version: v1.14.4
          helm.sh/chart: cert-manager-v1.14.4
          pod-template-hash: 76f8897d9
      spec:
        containers:
        - args:
          - --v=2
          - --cluster-resource-namespace=$(POD_NAMESPACE)
          - --leader-election-namespace=kube-system
          - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.14.4
          - --max-concurrent-challenges=60
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: quay.io/jetstack/cert-manager-controller:v1.14.4
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 8
            httpGet:
              path: /livez
              port: http-healthz
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 15
          name: cert-manager-controller
          ports:
          - containerPort: 9402
            name: http-metrics
            protocol: TCP
          - containerPort: 9403
            name: http-healthz
            protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsConfig:
          nameservers:
          - 1.1.1.1
          - 8.8.8.8
        dnsPolicy: None
        enableServiceLinks: false
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: cert-manager
        serviceAccountName: cert-manager
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: cert-manager
    creationTimestamp: "2025-07-16T22:18:07Z"
    generation: 1
    labels:
      app: cainjector
      app.kubernetes.io/component: cainjector
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: cainjector
      app.kubernetes.io/version: v1.14.4
      helm.sh/chart: cert-manager-v1.14.4
      pod-template-hash: 7ff5b598bc
    name: cert-manager-cainjector-7ff5b598bc
    namespace: cert-manager
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: cert-manager-cainjector
      uid: 56b3c1cb-4fe2-4b0a-97c8-1a5af6d008bf
    resourceVersion: "4656"
    uid: 3f6756cf-200e-41f4-96e2-7c27e8c57fa3
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/component: cainjector
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/name: cainjector
        pod-template-hash: 7ff5b598bc
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: cainjector
          app.kubernetes.io/component: cainjector
          app.kubernetes.io/instance: cert-manager
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: cainjector
          app.kubernetes.io/version: v1.14.4
          helm.sh/chart: cert-manager-v1.14.4
          pod-template-hash: 7ff5b598bc
      spec:
        containers:
        - args:
          - --v=2
          - --leader-election-namespace=kube-system
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: quay.io/jetstack/cert-manager-cainjector:v1.14.4
          imagePullPolicy: IfNotPresent
          name: cert-manager-cainjector
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        enableServiceLinks: false
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: cert-manager-cainjector
        serviceAccountName: cert-manager-cainjector
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: cert-manager
      meta.helm.sh/release-namespace: cert-manager
    creationTimestamp: "2025-07-16T22:18:07Z"
    generation: 1
    labels:
      app: webhook
      app.kubernetes.io/component: webhook
      app.kubernetes.io/instance: cert-manager
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: webhook
      app.kubernetes.io/version: v1.14.4
      helm.sh/chart: cert-manager-v1.14.4
      pod-template-hash: 64dfbdfbfc
    name: cert-manager-webhook-64dfbdfbfc
    namespace: cert-manager
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: cert-manager-webhook
      uid: 3056bbe1-f7d7-4377-98db-1866b4b8ad14
    resourceVersion: "4664"
    uid: e2f74878-b7ec-424d-b661-4506340f9fa7
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/component: webhook
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/name: webhook
        pod-template-hash: 64dfbdfbfc
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: webhook
          app.kubernetes.io/component: webhook
          app.kubernetes.io/instance: cert-manager
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: webhook
          app.kubernetes.io/version: v1.14.4
          helm.sh/chart: cert-manager-v1.14.4
          pod-template-hash: 64dfbdfbfc
      spec:
        containers:
        - args:
          - --v=2
          - --secure-port=10250
          - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
          - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
          - --dynamic-serving-dns-names=cert-manager-webhook
          - --dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE)
          - --dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE).svc
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: quay.io/jetstack/cert-manager-webhook:v1.14.4
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /livez
              port: 6080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: cert-manager-webhook
          ports:
          - containerPort: 10250
            name: https
            protocol: TCP
          - containerPort: 6080
            name: healthcheck
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 6080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        enableServiceLinks: false
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: cert-manager-webhook
        serviceAccountName: cert-manager-webhook
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "2"
      meta.helm.sh/release-name: namecheap-webhook
      meta.helm.sh/release-namespace: cert-manager
    creationTimestamp: "2025-07-16T22:30:10Z"
    generation: 1
    labels:
      app: cert-manager-webhook-namecheap
      pod-template-hash: 56cc5fd59d
      release: namecheap-webhook
    name: namecheap-webhook-cert-manager-webhook-namecheap-56cc5fd59d
    namespace: cert-manager
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: namecheap-webhook-cert-manager-webhook-namecheap
      uid: 20256b26-244c-46a2-8049-5ca18e8e8f0b
    resourceVersion: "6134"
    uid: 57adbc65-7258-422e-8a86-e7a37c12f7b0
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: cert-manager-webhook-namecheap
        pod-template-hash: 56cc5fd59d
        release: namecheap-webhook
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: cert-manager-webhook-namecheap
          pod-template-hash: 56cc5fd59d
          release: namecheap-webhook
      spec:
        containers:
        - args:
          - --tls-cert-file=/tls/tls.crt
          - --tls-private-key-file=/tls/tls.key
          env:
          - name: GROUP_NAME
            value: acme.sleepy-puppy.com
          image: ghcr.io/extrality/cert-manager-webhook-namecheap:v0.3.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: https
              scheme: HTTPS
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: cert-manager-webhook-namecheap
          ports:
          - containerPort: 443
            name: https
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: https
              scheme: HTTPS
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tls
            name: certs
            readOnly: true
        dnsConfig:
          nameservers:
          - 1.1.1.1
          - 8.8.8.8
        dnsPolicy: None
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: namecheap-webhook-cert-manager-webhook-namecheap
        serviceAccountName: namecheap-webhook-cert-manager-webhook-namecheap
        terminationGracePeriodSeconds: 30
        volumes:
        - name: certs
          secret:
            defaultMode: 420
            secretName: namecheap-webhook-cert-manager-webhook-namecheap-webhook-tls
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: namecheap-webhook
      meta.helm.sh/release-namespace: cert-manager
    creationTimestamp: "2025-07-16T22:28:54Z"
    generation: 2
    labels:
      app: cert-manager-webhook-namecheap
      pod-template-hash: 6fc75c6cf7
      release: namecheap-webhook
    name: namecheap-webhook-cert-manager-webhook-namecheap-6fc75c6cf7
    namespace: cert-manager
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: namecheap-webhook-cert-manager-webhook-namecheap
      uid: 20256b26-244c-46a2-8049-5ca18e8e8f0b
    resourceVersion: "6146"
    uid: cef94de5-1f5c-42d3-8233-7fbfffa93a66
  spec:
    replicas: 0
    selector:
      matchLabels:
        app: cert-manager-webhook-namecheap
        pod-template-hash: 6fc75c6cf7
        release: namecheap-webhook
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: cert-manager-webhook-namecheap
          pod-template-hash: 6fc75c6cf7
          release: namecheap-webhook
      spec:
        containers:
        - args:
          - --tls-cert-file=/tls/tls.crt
          - --tls-private-key-file=/tls/tls.key
          env:
          - name: GROUP_NAME
            value: acme.sleepy-puppy.com
          image: ghcr.io/extrality/cert-manager-webhook-namecheap:v0.3.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: https
              scheme: HTTPS
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: cert-manager-webhook-namecheap
          ports:
          - containerPort: 443
            name: https
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: https
              scheme: HTTPS
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tls
            name: certs
            readOnly: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: namecheap-webhook-cert-manager-webhook-namecheap
        serviceAccountName: namecheap-webhook-cert-manager-webhook-namecheap
        terminationGracePeriodSeconds: 30
        volumes:
        - name: certs
          secret:
            defaultMode: 420
            secretName: namecheap-webhook-cert-manager-webhook-namecheap-webhook-tls
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: cert-manager.io/v1
  kind: ClusterIssuer
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"cert-manager.io/v1","kind":"ClusterIssuer","metadata":{"annotations":{},"name":"letsencrypt-prod"},"spec":{"acme":{"email":"redwards@sleepy-puppy.com","privateKeySecretRef":{"name":"letsencrypt-prod-account-key"},"server":"https://acme-v02.api.letsencrypt.org/directory","solvers":[{"dns01":{"webhook":{"config":{"apiKeySecretRef":{"key":"api-key","name":"namecheap-api-key"},"apiUserSecretRef":{"key":"api-user","name":"namecheap-api-key"}},"groupName":"acme.sleepy-puppy.com","solverName":"namecheap"}}}]}}}
    creationTimestamp: "2025-07-16T22:46:50Z"
    generation: 1
    name: letsencrypt-prod
    resourceVersion: "7988"
    uid: 71ac16b7-a494-4d9e-941c-71fa385f3bc5
  spec:
    acme:
      email: redwards@sleepy-puppy.com
      privateKeySecretRef:
        name: letsencrypt-prod-account-key
      server: https://acme-v02.api.letsencrypt.org/directory
      solvers:
      - dns01:
          webhook:
            config:
              apiKeySecretRef:
                key: api-key
                name: namecheap-api-key
              apiUserSecretRef:
                key: api-user
                name: namecheap-api-key
            groupName: acme.sleepy-puppy.com
            solverName: namecheap
  status:
    acme:
      lastPrivateKeyHash: Cloi075HZmj6/fCXtLJ1QXazUpUkUrMVnrzNWGPD+KA=
      lastRegisteredEmail: redwards@sleepy-puppy.com
    conditions:
    - lastTransitionTime: "2025-07-16T22:46:51Z"
      message: The ACME account was registered with the ACME server
      observedGeneration: 1
      reason: ACMEAccountRegistered
      status: "True"
      type: Ready
- apiVersion: cert-manager.io/v1
  kind: ClusterIssuer
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"cert-manager.io/v1","kind":"ClusterIssuer","metadata":{"annotations":{},"name":"letsencrypt-staging"},"spec":{"acme":{"email":"richard@sleepy-puppy.com","privateKeySecretRef":{"name":"letsencrypt-staging-key"},"server":"https://acme-staging-v02.api.letsencrypt.org/directory","solvers":[{"dns01":{"webhook":{"config":{"apiKeySecretRef":{"key":"apiKey","name":"namecheap-api-key"},"apiUserSecretRef":{"key":"apiUser","name":"namecheap-api-key"}},"groupName":"acme.sleepy-puppy.com","solverName":"namecheap"}}}]}}}
    creationTimestamp: "2025-07-16T22:43:21Z"
    generation: 1
    name: letsencrypt-staging
    resourceVersion: "7583"
    uid: d84ef5f4-86b9-4d83-af60-2927bf98f51c
  spec:
    acme:
      email: richard@sleepy-puppy.com
      privateKeySecretRef:
        name: letsencrypt-staging-key
      server: https://acme-staging-v02.api.letsencrypt.org/directory
      solvers:
      - dns01:
          webhook:
            config:
              apiKeySecretRef:
                key: apiKey
                name: namecheap-api-key
              apiUserSecretRef:
                key: apiUser
                name: namecheap-api-key
            groupName: acme.sleepy-puppy.com
            solverName: namecheap
  status:
    acme:
      lastPrivateKeyHash: wdc/Squd2XNawTRGaPjvjt9tk82JaA46iDlt6p14h9I=
      lastRegisteredEmail: richard@sleepy-puppy.com
    conditions:
    - lastTransitionTime: "2025-07-16T22:43:22Z"
      message: The ACME account was registered with the ACME server
      observedGeneration: 1
      reason: ACMEAccountRegistered
      status: "True"
      type: Ready
- apiVersion: cert-manager.io/v1
  kind: Issuer
  metadata:
    annotations:
      meta.helm.sh/release-name: namecheap-webhook
      meta.helm.sh/release-namespace: cert-manager
    creationTimestamp: "2025-07-16T22:28:54Z"
    generation: 1
    labels:
      app: cert-manager-webhook-namecheap
      app.kubernetes.io/managed-by: Helm
      chart: cert-manager-webhook-namecheap-0.2.2
      heritage: Helm
      release: namecheap-webhook
    name: namecheap-webhook-cert-manager-webhook-namecheap-ca
    namespace: cert-manager
    resourceVersion: "5908"
    uid: 8ddb142c-155b-48cc-907e-b53265211fc9
  spec:
    ca:
      secretName: namecheap-webhook-cert-manager-webhook-namecheap-ca
  status:
    conditions:
    - lastTransitionTime: "2025-07-16T22:28:59Z"
      message: Signing CA verified
      observedGeneration: 1
      reason: KeyPairVerified
      status: "True"
      type: Ready
- apiVersion: cert-manager.io/v1
  kind: Issuer
  metadata:
    annotations:
      meta.helm.sh/release-name: namecheap-webhook
      meta.helm.sh/release-namespace: cert-manager
    creationTimestamp: "2025-07-16T22:28:54Z"
    generation: 1
    labels:
      app: cert-manager-webhook-namecheap
      app.kubernetes.io/managed-by: Helm
      chart: cert-manager-webhook-namecheap-0.2.2
      heritage: Helm
      release: namecheap-webhook
    name: namecheap-webhook-cert-manager-webhook-namecheap-selfsign
    namespace: cert-manager
    resourceVersion: "5838"
    uid: d82f6691-59e0-488c-a661-eebdfdb5cff0
  spec:
    selfSigned: {}
  status:
    conditions:
    - lastTransitionTime: "2025-07-16T22:28:54Z"
      observedGeneration: 1
      reason: IsReady
      status: "True"
      type: Ready
- apiVersion: v1
  data:
    ca.crt: |
      -----BEGIN CERTIFICATE-----
      MIIDBTCCAe2gAwIBAgIIGyotGFD68mowDQYJKoZIhvcNAQELBQAwFTETMBEGA1UE
      AxMKa3ViZXJuZXRlczAeFw0yNTA3MTYyMTM0MzNaFw0zNTA3MTQyMTM5MzNaMBUx
      EzARBgNVBAMTCmt1YmVybmV0ZXMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK
      AoIBAQDZFQMFSQycwxAxy4CqRsKsCilvLR808cUPHYnwHLYC66XXLtdLMVIyQ/VL
      Gihe72wddjDxeQTgoLpRbJhDkD4i8SxnZkoFGZ5PxZDfi5dJa3tNLOIv8tcVeBEh
      gbwcleCojfVjpqPcQ3VYT33Zo005vo7JFi2JQng3Yu04JXWD0KKjqgy7d3pYMEqP
      3+tWTyYtiWljZ4eH7v1vur4vUBdqFbSRuqM0cMNu7twRKOoMkNsjJZfhYWJHK1Cp
      9/6e+1W4I1jDpjPeNNznnoa4kCRUui7ReKZwFoVUQKC20Mb0CD96BAGrFS0gPQ8M
      m1KkbciAeqhUsfS4GbHBeQUeBeMzAgMBAAGjWTBXMA4GA1UdDwEB/wQEAwICpDAP
      BgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBTxgeW6d8T/9NybTHhXPTErt0zm7DAV
      BgNVHREEDjAMggprdWJlcm5ldGVzMA0GCSqGSIb3DQEBCwUAA4IBAQCKI1Z9vNgd
      5i9jrYs1WEDFsqTKMag2MpVl8ibJldEur9MTBTdZ15KlirZDzz6a0koiy4QCpPjK
      GOOF9R4b2c2Pq5aeycRgN5WRkLVycNc8bNSqH+ky2t6kpTH5h1MLSLOPRzEMaIcx
      xXWzcUm60UwiUZd6cviDz8xxodvsvO0FNXpp7rirBezw9jnnT3WemVymVVE0N852
      E5SeUIW9bCUIm2UEiaLqA7F4Yun/dkvrFjTYzykk9GJV9LN2CntwrzaWyN6n3CNC
      mUvNklv7+SMHyDTgkLxq4nWeWamqG6PxlIPc0ZLzaPAVdLylS732mN3Wu6aN5HCN
      8qNbEI8PCId9
      -----END CERTIFICATE-----
  kind: ConfigMap
  metadata:
    annotations:
      kubernetes.io/description: Contains a CA bundle that can be used to verify the
        kube-apiserver when using internal endpoints such as the internal service
        IP or kubernetes.default.svc. No other usage is guaranteed across distributions
        of Kubernetes clusters.
    creationTimestamp: "2025-07-16T21:58:48Z"
    name: kube-root-ca.crt
    namespace: cert-manager
    resourceVersion: "2574"
    uid: 50865788-5fdf-4587-8379-38f2beaa8efd
- apiVersion: v1
  data:
    ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJ3ekNDQVVpZ0F3SUJBZ0lSQU1iMm5GSUQ2cFVyNzN5VURBUkN3YUV3Q2dZSUtvWkl6ajBFQXdNd0lqRWcKTUI0R0ExVUVBeE1YWTJWeWRDMXRZVzVoWjJWeUxYZGxZbWh2YjJzdFkyRXdIaGNOTWpVd056RTJNakl4T0RFeApXaGNOTWpZd056RTJNakl4T0RFeFdqQWlNU0F3SGdZRFZRUURFeGRqWlhKMExXMWhibUZuWlhJdGQyVmlhRzl2CmF5MWpZVEIyTUJBR0J5cUdTTTQ5QWdFR0JTdUJCQUFpQTJJQUJMQWhDbDZ2SkhLVmorSk1KRzViQW5rY3lvbHkKa1lOczRZZ0JsZkRPaitFODZ2aUdORFhBR1B3aTdqaHphUDdpMWZPVDkwenVtcEUrVlNVYXhQb3lwMkkvRzY1VgptQ2Rrd083d0hFNHZxdGdoQ1d2QjM1WnhqVkZxbCtRR0R2ank2S05DTUVBd0RnWURWUjBQQVFIL0JBUURBZ0trCk1BOEdBMVVkRXdFQi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZJSUFmUkNBNGtDdHlPangySkZkUjFzZWJmTlAKTUFvR0NDcUdTTTQ5QkFNREEya0FNR1lDTVFESjBBVUgxRmRiV1JhWk94bnFsU0haRjFCc01XSFU0RmJYVk5mQQordDJCdHd2SUFKcVV2N2VSTDQxSVV2ZmtpbWtDTVFDUE0wVE5GM2dSaW1Qd3FjNWF3a0d4T3NnQzZtWDgxaDF4Cjl3YjY3cDltbXZPVWdjdUZqaWlZQWVleDRVbi81bXM9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
    tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJ3ekNDQVVpZ0F3SUJBZ0lSQU1iMm5GSUQ2cFVyNzN5VURBUkN3YUV3Q2dZSUtvWkl6ajBFQXdNd0lqRWcKTUI0R0ExVUVBeE1YWTJWeWRDMXRZVzVoWjJWeUxYZGxZbWh2YjJzdFkyRXdIaGNOTWpVd056RTJNakl4T0RFeApXaGNOTWpZd056RTJNakl4T0RFeFdqQWlNU0F3SGdZRFZRUURFeGRqWlhKMExXMWhibUZuWlhJdGQyVmlhRzl2CmF5MWpZVEIyTUJBR0J5cUdTTTQ5QWdFR0JTdUJCQUFpQTJJQUJMQWhDbDZ2SkhLVmorSk1KRzViQW5rY3lvbHkKa1lOczRZZ0JsZkRPaitFODZ2aUdORFhBR1B3aTdqaHphUDdpMWZPVDkwenVtcEUrVlNVYXhQb3lwMkkvRzY1VgptQ2Rrd083d0hFNHZxdGdoQ1d2QjM1WnhqVkZxbCtRR0R2ank2S05DTUVBd0RnWURWUjBQQVFIL0JBUURBZ0trCk1BOEdBMVVkRXdFQi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZJSUFmUkNBNGtDdHlPangySkZkUjFzZWJmTlAKTUFvR0NDcUdTTTQ5QkFNREEya0FNR1lDTVFESjBBVUgxRmRiV1JhWk94bnFsU0haRjFCc01XSFU0RmJYVk5mQQordDJCdHd2SUFKcVV2N2VSTDQxSVV2ZmtpbWtDTVFDUE0wVE5GM2dSaW1Qd3FjNWF3a0d4T3NnQzZtWDgxaDF4Cjl3YjY3cDltbXZPVWdjdUZqaWlZQWVleDRVbi81bXM9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
    tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JRzJBZ0VBTUJBR0J5cUdTTTQ5QWdFR0JTdUJCQUFpQklHZU1JR2JBZ0VCQkRENEE4M0NjdjFiTkdPZXdnaVYKM0RrVkpoOTRGak1Gd0xuN2xEeitlK0VuWXVQV3ZKNTlFNFk0eEJlbThXYWVraHFoWkFOaUFBU3dJUXBlcnlSeQpsWS9pVENSdVd3SjVITXFKY3BHRGJPR0lBWlh3em8vaFBPcjRoalExd0JqOEl1NDRjMmorNHRYemsvZE03cHFSClBsVWxHc1Q2TXFkaVB4dXVWWmduWk1EdThCeE9MNnJZSVFscndkK1djWTFSYXBma0JnNzQ4dWc9Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K
  kind: Secret
  metadata:
    annotations:
      cert-manager.io/allow-direct-injection: "true"
    creationTimestamp: "2025-07-16T22:18:11Z"
    name: cert-manager-webhook-ca
    namespace: cert-manager
    resourceVersion: "4631"
    uid: e2635961-d3e5-4a7b-b577-1262e53a2f50
  type: Opaque
- apiVersion: v1
  data:
    tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBdXpaM090VGM0c3FsWUZpUlJxbkdLSDB3M3lQT0VCQk96bkRmVGVhQUxrbkNmL3lBCk5oS3dwMVcwUU9jU1hKWTJWRTlZK05BQkUzUG8yYVF4bHZsZllrOWJWUS94MWlBV2NlaTMzVmwwMm16QUc0ekMKVUdsa2Rhbk5MaVY4TS81ODlmK2dybVVydUFmbWxCclN0cGpSYUFqb3U0cno3ck1qSGQ1Tmp2clVMWThNYXJhOQp3YXduMEhpQWdPdVMyS2s1M1ltQ1VmdE9KdHVxdkhxK0lESzFNelQ4TzR3UnJRUmttRmxIdU1YUG1ONnpyYjlPCk9WUkExMkRhbHgxc2JyYjVtRk13ODZ2Um84amtTZVNXNDc0RXZZbytrR2wwU1k2Nzd2WXp4V1RpMXd5Q0wwR2cKbGJDYmkrLzNjblpuTzNHSHgwMFQ2NVVUbThMVzNqc2tuTHlPMHdJREFRQUJBb0lCQUcyMTMyMWtyUVZqQ0VOTAo0K2JyT3lzakltN0J4dEozSEJleTRjbi9HSU1IeXFuQ1NVaG03NHRBbUYrb2lvUWpxemNCUVB5ZXVPS3pmSE4rCjIyakVQdmVYMWNnbGplMlQ1Rk5nczg5TnkwTHRsQzhROEJhN2pKbS9wblF5bDNUSTRHWXhKZkxOYXk5dndkcHQKVmFxWUo2KzErTjFlOHRDaHZpU1UwQkxJUDJ0cWRpS0t6VDJqNlo5UFV2Y3BmRDRRMFV5a3VyUnkwcnlhZVNoUgo3NmJpajRqZ2I4RGkyWTdHMHBZZDRJR2tvVFZzRkhkVU9hWmhsOEtoYjRycE9yRThKSjFaMm5OY3A2L01teXNWCkV4czg3M0dmaUYwQWJTcWxpcmp3UEVDcVVkVU9PN05sdFB5U2RHM1FVaVg2anloNzNsN0VGV1BsMGI3SEVwa00KMGtTS0dCRUNnWUVBNk55dTUveWJGWFRSNkd2c2RkZENHdWxVanRlUElrUUcvUHB2em9EZGtZYTRrek9weTB4RQpUSmlIUXpQVE4vTEJsbUF0SG1ka2R4eDI1VzkzVnJGNFVjV21iYTlxc3laTUZTTUVhNW1GT1Z6Vm9Ha1FtU3duCjBhaG1KZWRvYXczR3AzUkdCR3dQUDFVZktObUF5enFoSUo0SlVCT2s3YWs0QVpGaG05dlNNYmNDZ1lFQXpkQ1oKd3FaYmJNMXAwS2dYTGlBMFN3Zlg5T1dWRUZXTksrZ0VJeVJuV05leFdDOUNxQ3BHdmwzMmE5QWtRa25kd0hSdApVY0hrRWFNdElmVjZacXVQMjNIbWNzcUU5SEM5ckMraDl0ZTdtSnZQVHBwQjJGVzFYNjVHQVNTalZQU3hPNHRlCkdVWklhN2R4b3E2dlJDRkUwYS9lQ0gvajg5ZzRrZm4vK1FVeUc4VUNnWUJ0bW9uYythSUpYRjM4dHVlcW83SWkKdHBhdFVUcTIxeXd1NExYRmpoUThEaHhNZFBIRGxkZEQ4anNnWDRGWWdUT3JVd09KbndMRHFhc3czT0ZmOWRKNwpNcnZlUHNYTEl3aUdubC9UUVlSYWRwNjZqUmxaNzFXaXNrKzZJWXlkYnZPRkdBNW93SEFBMEZFRlNqTDc5VkduCjU1cmNqUktCSnJnTXpPQVRtMGo1U3dLQmdESUh3a2pSM2FtT0tXbkNZcGdnMWZWak83alpVaW45VWVyWlpLQVMKU2xrTFhaM2RKeXZ2MHZDVnNNQTJnWW5ub05NV3VqaEVsS2RBN2tpeC9vWVVzRXljM0hNTkRkTEowU0daRnBzRgppQ0dweG5RS0JYV01LQ0hSSUUxSTFiZGlIKzhraXNSRUZIaXl5Qm5Pc3VZeDNDUEl4NFZ6YVRzdVZWb08xbzEzCkdONHRBb0dBZkNLOG4wbVhWQ1phaFdtSVFMaDN2NjNsTm5PR25xNVFMUi83STdTWWp0YW1tbHpGQm1tU1kwbWcKT3laSTAybkNrNVA4K0dERzdlMDlKUjVZSGRKcGRWRDZSQis1VTd1R2t1RlYyWHI4VmtsZGtuaE85c1lweFllbApFTzFoRG5EOERSNXVVSnF3R1VtTExZdURORUFBN1VxOEhoOGxuanhiQnJWQnFlaHJWajg9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
  kind: Secret
  metadata:
    creationTimestamp: "2025-07-16T22:46:50Z"
    name: letsencrypt-prod-account-key
    namespace: cert-manager
    resourceVersion: "7987"
    uid: 33dedb90-4b23-4de7-af99-fcaa0a1bd087
  type: Opaque
- apiVersion: v1
  data:
    tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBdlFGMnZjWTRnNjFNU3A2ZnlFelJtS3cxV0xkSG9XN0F0ck5nQW03LzlVM0kxYVpXClM5KytFakMxMnBUL3BNVEVhMXI1K2RWYkdHUFNVTXFMaHAwZXJpaDdRZXpaZngwVWJlQ2J5R0Y0UElFeWVHUGIKWXBUYVB5UlNaREZZMlNlOU9vWW1NRVV2c1R0Vmx0R3FNRVhaeVZMTUYvSnloYXgwY2tYa0ZMZ092djNLVXFuOAphK0NuZzFLU2RDeUxpME5LT2tWQUtPN0F0bFJFbjJEUitmS3dNYk5TMzlMWTNyZjJzSnIvUjFScFo0S0hvQ1VaClVUVytDaXRGb2I5SmhFbFVsKzNhVmJzOUlrdEE5U1VJMTF5ZkNtT2JvVm04UkV2ODNYbUMzdTl0L3hNTU8vdTMKMklYQnFHUk5zNUlTV2QvcUF4UGNVWHN6Vjh1dWpYajIwLzlxY3dJREFRQUJBb0lCQVFDU2hhMzkxTXMvR1h2SgpaVXROUm5BK1FWSmg0a1AvbkJKK0VIVGZyaGx6bThlVUNZMWc2S1U3Q05RU0RleFpXY2xEeUpWOTNxN3VLNFNCCjZXTmRDalVjb25sYlZEZ1FXUVRiWVlLalJ4eWxHeXQ3TlQ2QUlCRkpYZWtaanovbnFPMERqN2ZQTi9PUEhBWncKRXo0eWloUWFCTHYvM0k1M25vZnZoc3NZWE0vaHN4eVp0WVZjV3dhY21MRlZKdmZtbXJ4TVAvREpzTjE5UEduTQp1MnEzVDFiRXp5RjFxb3RUNWhVMzk5ZklyNko4bG9YS25VV1ZramliQkY0clVvd2VRSzBoa2VZTDN5VkJERjkrCng4c3RzMHdLTnp0N2ZPZ0pHUkJ6Q3ZaeW1tL0NQNTB0RDlvZHJjdElNRXVZMWM0T0UvVU1VaWlpUmRMVXVnUjcKWm9ab1RoV0JBb0dCQU5abXRsZHdnS05NZVpNYis4Wm0vMldrQVFaVUhlcXd4VC8wMDR3ZUpSS1ZTUXcxVUNxcAo0M0tsUHZhdEVMWG5wcm9vOW1wTjN4NWRIWlN2Vy9nZnd3QU9vM3RIVmJQazF3SGxzbE9SelR0bkxuZWhsaUNNCmNLZXpCM2J6UVhhOXFFc0lnUFU3bXVjTVovWWxKV1pWR29EOVJWaThoY3FkWlBjV3FkUDBjWlVUQW9HQkFPR3QKWEFXM2lvZGRpZk1TSVQ3UFlQamcwYXRPYnZKanRyVmV5dk5FK09ObHRHS09nOWd2N09ORVVwSnd6dS9QL1gxcwpobWhnRUJtamFoaXFvZGVGVlU1WThYMC83bzRMeXpaOUZkZjdPY2dmakUySS9QWkdhSUxvUWxUNWw1b1lYOUxOCm5FaERoNjBKNmV2Y3FOY3IyaEJFcnowUkxCV1Y1L210TVUxM2hXRWhBb0dCQU5aUnhtU1I2WVZUcFJRUkhSV3YKVUE1aWEwUFFRamVnalF6cHg2NkJVNzNIelVXTzVaeEFSMFVMT20yTGd2RFRxQzdmVTdQZ00vRStVNXVWei9HdwpqbFU0VE9PbTQxejRuSlVnNzZucVRhWGI5dTlQYjZzSnVITnEyME5rMTBQRFFyLyt1Q3BzY3VRVDJyaUxXVjk2Ckl3eGVJVHdhK0FNYVl4czhaSGVrR3daUkFvR0FjMUsxbmE1SE9obFFyMGZxZVVCY0c1STNVc1VINlJHUGdtdG8KWnB3dVczWFRrakdscWtvRFViZk9Ra3NuVkdFQzlwOElxRG0rd0h0RGNrdHYzTVNqN1IrQ2VEQzlaUlVkeVVCdQpjeXBNUXJuc1pvckVTYzE5QnJoTmZVTDJkNlpSQVZaVXNKRGh1a2xBb21qbVZ0NXYxclJpb0dBd0dPKzcxVmp0Cnd0cDY3RUVDZ1lBb2wycmQ2dG5LaDBNVm5wb1VLZUxRcDRlMStlR25Uc0wyeWFRNHdmQWxLOVF2YlFJTWgyYmYKZGpLN3p4aGc1WnpoVHVSS0hoWmNCTjVJQ2NBbFYvbXlaalY1UnVNS3hyeTlJSGt5QVRKQUsycXJidWdHYzhCegphb1VMNDhrcENGOWxvcUV1MTF2Q2lNWkJzWXVWWk9DdGRKNktRK3FyRmJmTHhzTThtZm1Zamc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
  kind: Secret
  metadata:
    creationTimestamp: "2025-07-16T22:43:21Z"
    name: letsencrypt-staging-key
    namespace: cert-manager
    resourceVersion: "7579"
    uid: 05041eff-9602-407c-9336-c0e837124651
  type: Opaque
- apiVersion: v1
  data:
    apiKey: NTk5MTUyOWI1ZWU3NGVjNWI2ZTIyMWY0ZDU0NDhkOTQ=
    apiUser: cndlZHdhcmRz
  kind: Secret
  metadata:
    creationTimestamp: "2025-07-16T22:28:07Z"
    name: namecheap-api-key
    namespace: cert-manager
    resourceVersion: "5730"
    uid: 9cb8636f-c4ce-467a-b525-91cf8d152e33
  type: Opaque
- apiVersion: v1
  data:
    ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURQakNDQWlhZ0F3SUJBZ0lRSmkxZU1DUFFwQlEzdGZHekNGUStYakFOQmdrcWhraUc5dzBCQVFzRkFEQTUKTVRjd05RWURWUVFERXk1allTNWpaWEowTFcxaGJtRm5aWEl0ZDJWaWFHOXZheTF1WVcxbFkyaGxZWEF1WTJWeQpkQzF0WVc1aFoyVnlNQjRYRFRJMU1EY3hOakl5TWpnMU5Wb1hEVE13TURjeE5USXlNamcxTlZvd09URTNNRFVHCkExVUVBeE11WTJFdVkyVnlkQzF0WVc1aFoyVnlMWGRsWW1odmIyc3RibUZ0WldOb1pXRndMbU5sY25RdGJXRnUKWVdkbGNqQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQU55a1FFQjlCbUMxL3E2bAo5czNUTzQrRnJYWGZXR3Z4c2hpdEZGbTQ2QkZ4TzFKbGpnM0pQamY5WFdvSlFqYytTb2trWnFaeHZ4RDZrQ21wCkJOaFpoQXdLeFVQMWM0eXdnazVQVWxhYVlTcTc4L2x2emFCVzBta0F0cG5WaWF6a1BhWkwvZTJPaDcyaXhoWGIKNTREeWViTUltdEZoQ0VhSjZjRDY5UGY0Y0RGUDB1Y3NVTFBzYUliN09JZFZVbkRic2laTFh3WW9kYVgzTHRXSgp2R0xkR1YwbVducElLbzFsOFVFNTI4MmpWZlJyZU43VHFSVE5zSzQraHBDWU5jWHRjSjhiWlFmaitjN0hDVlp0CjNnYkFtN3BQOUtvdWhYKzVlOVc0QkRJMC9qZjBhWXNBelpMSC8zcEt1MDBiSEJiMmU4T1F5blJXWml3OGpSaW0Kek0zV1Fua0NBd0VBQWFOQ01FQXdEZ1lEVlIwUEFRSC9CQVFEQWdLa01BOEdBMVVkRXdFQi93UUZNQU1CQWY4dwpIUVlEVlIwT0JCWUVGT2RQNjlhR2pMYnA3WTZ4enlyclJRcldzZW8rTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCCkFRQnBFSHVhcEt6RllYRDFqanBrb1VsdkhoTkJEWHdoK21RYlA1TWdQTmZYMjFob2NqRktRSmN1QlRTTDZQWWwKNW9KNjBMai90azlETW10bDFFKythcWpzbkVOSjd1NmZEdkQrYis1MHJ1QzJxb3NqcGZlbHJueXRuWmoyTWZNQQp2aEdoV1RVT0tVOSs1SHRjRDRmQkdMaExvQ1NNK1FzcTJHUUQ4TEw5REtxNjZxMHROTEYweC9yVUViSEQ2aHlGCllDY2l4ZW5wcEdkSUhmKzE1dzZTTkdmNHlYTVFUc0hVK29lMzEwWXQ2Y2EwUFo4aDRqN09mdFE3TFpTZ2g1bloKdW1rdWVmRjRGUW5yVHF0ZWxPaDZKNGJjdTNpODM4V3BibHhHbnMvSFp6SzVjU3BrL2hKUFdNdEU5Ky9HQzdGUwpqK2ZGOENXSVBsa0R6K1Rhekd3MlhkWEMKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
    tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURQakNDQWlhZ0F3SUJBZ0lRSmkxZU1DUFFwQlEzdGZHekNGUStYakFOQmdrcWhraUc5dzBCQVFzRkFEQTUKTVRjd05RWURWUVFERXk1allTNWpaWEowTFcxaGJtRm5aWEl0ZDJWaWFHOXZheTF1WVcxbFkyaGxZWEF1WTJWeQpkQzF0WVc1aFoyVnlNQjRYRFRJMU1EY3hOakl5TWpnMU5Wb1hEVE13TURjeE5USXlNamcxTlZvd09URTNNRFVHCkExVUVBeE11WTJFdVkyVnlkQzF0WVc1aFoyVnlMWGRsWW1odmIyc3RibUZ0WldOb1pXRndMbU5sY25RdGJXRnUKWVdkbGNqQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQU55a1FFQjlCbUMxL3E2bAo5czNUTzQrRnJYWGZXR3Z4c2hpdEZGbTQ2QkZ4TzFKbGpnM0pQamY5WFdvSlFqYytTb2trWnFaeHZ4RDZrQ21wCkJOaFpoQXdLeFVQMWM0eXdnazVQVWxhYVlTcTc4L2x2emFCVzBta0F0cG5WaWF6a1BhWkwvZTJPaDcyaXhoWGIKNTREeWViTUltdEZoQ0VhSjZjRDY5UGY0Y0RGUDB1Y3NVTFBzYUliN09JZFZVbkRic2laTFh3WW9kYVgzTHRXSgp2R0xkR1YwbVducElLbzFsOFVFNTI4MmpWZlJyZU43VHFSVE5zSzQraHBDWU5jWHRjSjhiWlFmaitjN0hDVlp0CjNnYkFtN3BQOUtvdWhYKzVlOVc0QkRJMC9qZjBhWXNBelpMSC8zcEt1MDBiSEJiMmU4T1F5blJXWml3OGpSaW0Kek0zV1Fua0NBd0VBQWFOQ01FQXdEZ1lEVlIwUEFRSC9CQVFEQWdLa01BOEdBMVVkRXdFQi93UUZNQU1CQWY4dwpIUVlEVlIwT0JCWUVGT2RQNjlhR2pMYnA3WTZ4enlyclJRcldzZW8rTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCCkFRQnBFSHVhcEt6RllYRDFqanBrb1VsdkhoTkJEWHdoK21RYlA1TWdQTmZYMjFob2NqRktRSmN1QlRTTDZQWWwKNW9KNjBMai90azlETW10bDFFKythcWpzbkVOSjd1NmZEdkQrYis1MHJ1QzJxb3NqcGZlbHJueXRuWmoyTWZNQQp2aEdoV1RVT0tVOSs1SHRjRDRmQkdMaExvQ1NNK1FzcTJHUUQ4TEw5REtxNjZxMHROTEYweC9yVUViSEQ2aHlGCllDY2l4ZW5wcEdkSUhmKzE1dzZTTkdmNHlYTVFUc0hVK29lMzEwWXQ2Y2EwUFo4aDRqN09mdFE3TFpTZ2g1bloKdW1rdWVmRjRGUW5yVHF0ZWxPaDZKNGJjdTNpODM4V3BibHhHbnMvSFp6SzVjU3BrL2hKUFdNdEU5Ky9HQzdGUwpqK2ZGOENXSVBsa0R6K1Rhekd3MlhkWEMKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
    tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBM0tSQVFIMEdZTFgrcnFYMnpkTTdqNFd0ZGQ5WWEvR3lHSzBVV2Jqb0VYRTdVbVdPCkRjaytOLzFkYWdsQ056NUtpU1JtcG5HL0VQcVFLYWtFMkZtRURBckZRL1Z6akxDQ1RrOVNWcHBoS3J2eitXL04Kb0ZiU2FRQzJtZFdKck9ROXBrdjk3WTZIdmFMR0Zkdm5nUEo1c3dpYTBXRUlSb25wd1ByMDkvaHdNVS9TNXl4UQpzK3hvaHZzNGgxVlNjTnV5Smt0ZkJpaDFwZmN1MVltOFl0MFpYU1phZWtncWpXWHhRVG5iemFOVjlHdDQzdE9wCkZNMndyajZHa0pnMXhlMXdueHRsQitQNXpzY0pWbTNlQnNDYnVrLzBxaTZGZjdsNzFiZ0VNalQrTi9ScGl3RE4Ka3NmL2VrcTdUUnNjRnZaN3c1REtkRlptTER5TkdLYk16ZFpDZVFJREFRQUJBb0lCQVFDMWN6NkR5azNjYXM4dgp3YnplTjhEYm53dXZ6Q1ZqWURrZW9mZ0NjVllvUWY2UEhJVmVRUW14OGVOSXVLU0QyZTVpS2xWZ3ZGcHRGQ0pLCm9IMGpqenBRek9xOW9MV09GZnFUZkJneXNITUlPZG5DWUhleVRMUnROZkQxUWU4ZkIvVExOZU4xNGFrd0F4VDAKRlF5bHRzTHV3VHpReEFPU1B3akZjNXpSOExZVFZoTWk1N1RqRUd2VnFab1BVN0hXU0tPTW1sMWdmcFRnM0l3Mgp5STlOMjZqcnlRazEyRWJPaFg0TFZWWmFwbkhZZE1ITWNzdnR5b0lWOGhUWndkRGtKb3U4aGFKR1c4a1p5RVc4CmovVGM1YlB0VENwb1RaaE1Ua2grSHUya0NYeCtYNVRlTWRXNVZTL0s4UmlRdUJKWmhOUm4rQ0VYT2VmYUROUUEKSzFvZ3pDbWhBb0dCQU9wMUl1b1lOQVc4ZXNzL29IUzJ5U0tHOFZ2TkZ2cVBmbk9kcmo1ZUx1L1dmSlBOSUJCegpMSmJ3VW5pdUVuSzg1T3hXdmoxKzl4Z3Q5ZWNvZ2prRjZnZW1wQ3I3MWNXVEVvRHliMUlFZmtjVzZ0cUgvRG1ICmpMWE1Dc3ZaUWRrOU9OSFJlWTQvMWtmbU4vaVJwTFFubHErT3o5N04vaVN0Q0NuRlAwb251WU1IQW9HQkFQRHEKSTI1aWkxeTRZMldaa1RlcFRacFo3K2pnUHQwOSsrRlF3eHNkTnJMbE85SW9UZ0REUXZ1ZVNyOHgrUVdTeEtENApLTUtQL210Ykk0V3pjY2ZUc3hTWkZOcE84WEQzcEd4bWVhaEIwY1g1c01KOGhUVThwL0dqemNSNVhmN1VPR2VECnNKSmdBSWdLZVdyb1g5dWlnWU5EVXQ2N3I1N0VFeVhsUDN5QzVTNS9Bb0dCQUk3WGZzWVFxT0UxeTdvNHNaRnEKSzNDVnRrYXYxT2dpdEcvTUNYU0YvU0t5RW9RWjNRY29wR254VU0ybGdDZlhYY0YvdDdmUHVzdElkU0M0VlY1WQpkQlRsT2UvV0xvK0k0eVVjanlYeEJ0NVk0QXp6L0g4d1RsSVVWaCtMNWNwc3VrbGF6aXdVU0lEVmloUXU1Nkc2CjNOdG9yc3lYdzlha2RPeTk5NmsrT28vUkFvR0JBSzY3VXhsanRlcDQvZmFackI2djE4NGtmd0hyYXd6eVFQYkoKcWNqSHBuMllENHc4bVY2cVFMSFl2Q1B5TGNnaURDVW4rQUF0aWZ6NWJFa3p2a21Odk93cW4xbzdPWmlTdEptKwp0V3dZMlBuN1FIMis3S3FSSk1uNDRXd29Ec21keUk4amozU0sxcmZVeVAyR0xzaFJGQmhOUXhTekVneFg3LzlqClIybWFVbmtuQW9HQWNLdFhjV0tGenBoMkpZa1QzUFFtUVNvRmZWL2FVd285OUJVWlRVR2NjbXhZdVV6elFkYnkKNFNyamtaL2hhejNjc2NaMUJuNi9jNG45Zms4Smtobi9RVE94b0hMOHlQZzZqQjIyOU5HblVHdHR0bTNyNmkyeAptV2RPbXRKNElIaE11MnJFTm9ub1FIVzRMWXoyTGl1aUZsMVRXaytlVWdNTmZhVVMzRFR6UUwwPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
  kind: Secret
  metadata:
    annotations:
      cert-manager.io/alt-names: ""
      cert-manager.io/certificate-name: namecheap-webhook-cert-manager-webhook-namecheap-ca
      cert-manager.io/common-name: ca.cert-manager-webhook-namecheap.cert-manager
      cert-manager.io/ip-sans: ""
      cert-manager.io/issuer-group: ""
      cert-manager.io/issuer-kind: ""
      cert-manager.io/issuer-name: namecheap-webhook-cert-manager-webhook-namecheap-selfsign
      cert-manager.io/uri-sans: ""
    creationTimestamp: "2025-07-16T22:28:55Z"
    labels:
      controller.cert-manager.io/fao: "true"
    name: namecheap-webhook-cert-manager-webhook-namecheap-ca
    namespace: cert-manager
    resourceVersion: "5887"
    uid: ea5d2f89-c101-4069-b7a3-3a15f6f6999b
  type: kubernetes.io/tls
- apiVersion: v1
  data:
    ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURQakNDQWlhZ0F3SUJBZ0lRSmkxZU1DUFFwQlEzdGZHekNGUStYakFOQmdrcWhraUc5dzBCQVFzRkFEQTUKTVRjd05RWURWUVFERXk1allTNWpaWEowTFcxaGJtRm5aWEl0ZDJWaWFHOXZheTF1WVcxbFkyaGxZWEF1WTJWeQpkQzF0WVc1aFoyVnlNQjRYRFRJMU1EY3hOakl5TWpnMU5Wb1hEVE13TURjeE5USXlNamcxTlZvd09URTNNRFVHCkExVUVBeE11WTJFdVkyVnlkQzF0WVc1aFoyVnlMWGRsWW1odmIyc3RibUZ0WldOb1pXRndMbU5sY25RdGJXRnUKWVdkbGNqQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQU55a1FFQjlCbUMxL3E2bAo5czNUTzQrRnJYWGZXR3Z4c2hpdEZGbTQ2QkZ4TzFKbGpnM0pQamY5WFdvSlFqYytTb2trWnFaeHZ4RDZrQ21wCkJOaFpoQXdLeFVQMWM0eXdnazVQVWxhYVlTcTc4L2x2emFCVzBta0F0cG5WaWF6a1BhWkwvZTJPaDcyaXhoWGIKNTREeWViTUltdEZoQ0VhSjZjRDY5UGY0Y0RGUDB1Y3NVTFBzYUliN09JZFZVbkRic2laTFh3WW9kYVgzTHRXSgp2R0xkR1YwbVducElLbzFsOFVFNTI4MmpWZlJyZU43VHFSVE5zSzQraHBDWU5jWHRjSjhiWlFmaitjN0hDVlp0CjNnYkFtN3BQOUtvdWhYKzVlOVc0QkRJMC9qZjBhWXNBelpMSC8zcEt1MDBiSEJiMmU4T1F5blJXWml3OGpSaW0Kek0zV1Fua0NBd0VBQWFOQ01FQXdEZ1lEVlIwUEFRSC9CQVFEQWdLa01BOEdBMVVkRXdFQi93UUZNQU1CQWY4dwpIUVlEVlIwT0JCWUVGT2RQNjlhR2pMYnA3WTZ4enlyclJRcldzZW8rTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCCkFRQnBFSHVhcEt6RllYRDFqanBrb1VsdkhoTkJEWHdoK21RYlA1TWdQTmZYMjFob2NqRktRSmN1QlRTTDZQWWwKNW9KNjBMai90azlETW10bDFFKythcWpzbkVOSjd1NmZEdkQrYis1MHJ1QzJxb3NqcGZlbHJueXRuWmoyTWZNQQp2aEdoV1RVT0tVOSs1SHRjRDRmQkdMaExvQ1NNK1FzcTJHUUQ4TEw5REtxNjZxMHROTEYweC9yVUViSEQ2aHlGCllDY2l4ZW5wcEdkSUhmKzE1dzZTTkdmNHlYTVFUc0hVK29lMzEwWXQ2Y2EwUFo4aDRqN09mdFE3TFpTZ2g1bloKdW1rdWVmRjRGUW5yVHF0ZWxPaDZKNGJjdTNpODM4V3BibHhHbnMvSFp6SzVjU3BrL2hKUFdNdEU5Ky9HQzdGUwpqK2ZGOENXSVBsa0R6K1Rhekd3MlhkWEMKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
    tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUR6VENDQXJXZ0F3SUJBZ0lRZWJFM0UyQUtnLzBGVlFXaFZWWkdsakFOQmdrcWhraUc5dzBCQVFzRkFEQTUKTVRjd05RWURWUVFERXk1allTNWpaWEowTFcxaGJtRm5aWEl0ZDJWaWFHOXZheTF1WVcxbFkyaGxZWEF1WTJWeQpkQzF0WVc1aFoyVnlNQjRYRFRJMU1EY3hOakl5TWpnMU9Wb1hEVEkyTURjeE5qSXlNamcxT1Zvd0FEQ0NBU0l3CkRRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFMbmRIendDdGpFYnVJbkhPK1d4ZUVZc09HeDQKaXh1eEJ6UjlxSG9wendQNXhRS0VnUnRLS29QTXFlR2g1VVpRczVrYzN4Vjl2NzBpS3BaK3dwUDFTOVBGWkphSQp1VVhGcUFUbjBBRWNSdEhGTmZvTzc2WTNxRFdkTGlONVlxMkRIYVYwWFhmZ2VsWGphVks0cmN6NlhnUmF3UjZvCkpLVTFuY1M3c1RKaEpUVmdJM0RwdDZHa2l4cHNLYkFvcklOLzV3anNHeURtV0tBSk56ZUZmY2pydDJ1dXhuMWUKYlBlc05RVzFNRS8yZE1mQXB5N0F6NUNXenlzcUc5NERJMTltblA5eU9FcHZZSU1EcVg3bHR4T1VlTDVnVVZNVgplUmNrelNHNHRmaTlvOTRRcHUxTVJ4aGt2eE9ZQUVVdDMyc2dTYUNDbkV0Ykt4aW81eFo4MCtuSldqVUNBd0VBCkFhT0NBUWd3Z2dFRU1BNEdBMVVkRHdFQi93UUVBd0lGb0RBTUJnTlZIUk1CQWY4RUFqQUFNQjhHQTFVZEl3UVkKTUJhQUZPZFA2OWFHakxicDdZNnh6eXJyUlFyV3NlbytNSUhDQmdOVkhSRUJBZjhFZ2Jjd2diU0NNRzVoYldWagphR1ZoY0MxM1pXSm9iMjlyTFdObGNuUXRiV0Z1WVdkbGNpMTNaV0pvYjI5ckxXNWhiV1ZqYUdWaGNJSTlibUZ0ClpXTm9aV0Z3TFhkbFltaHZiMnN0WTJWeWRDMXRZVzVoWjJWeUxYZGxZbWh2YjJzdGJtRnRaV05vWldGd0xtTmwKY25RdGJXRnVZV2RsY29KQmJtRnRaV05vWldGd0xYZGxZbWh2YjJzdFkyVnlkQzF0WVc1aFoyVnlMWGRsWW1odgpiMnN0Ym1GdFpXTm9aV0Z3TG1ObGNuUXRiV0Z1WVdkbGNpNXpkbU13RFFZSktvWklodmNOQVFFTEJRQURnZ0VCCkFLMXFUczYvVFVGY3BKTWhpUTBXS0FDRXN6THNjcDdBZlRiVTV2Nit3MVQzRGREQzdVbkhEbUJvMnVzWTlSaUMKd3czYWtFTlBvRStSMk5aRWNwL0l4WkRmN3ZMeHVmazRiSmpCREttMGRKR0l2R1c0UUVuazQ5d1J4YWtMZXlXaQpjem5KNGN4WmdBODJSYmxPNDNTTW5XQktGUXdsVFREdWZCQWJ6czZSNVhlUmhRVFpySWk1emFGTDh3VFZoSnRZCm9vd1NRcENuYTdycWxLd3BhVHplalFQTlpiN2Yyc29YMk05WkFIcVpNZklxR0FvOUxxZVNudEJEM2E2L3dma2UKQkFwNXFzd0c4aVFuYmJBOWR4bEdCVGc3b2ZmV1VHNlFkNW5FSkVXcWJjVVJQcmdrck4zM2J2QlVtZ0p5Ly9iZgpnTUx0aC9xMUlDb2FaSjNkVWwyVWlkTT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
    tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBdWQwZlBBSzJNUnU0aWNjNzViRjRSaXc0YkhpTEc3RUhOSDJvZWluUEEvbkZBb1NCCkcwb3FnOHlwNGFIbFJsQ3ptUnpmRlgyL3ZTSXFsbjdDay9WTDA4Vmtsb2k1UmNXb0JPZlFBUnhHMGNVMStnN3YKcGplb05aMHVJM2xpcllNZHBYUmRkK0I2VmVOcFVyaXR6UHBlQkZyQkhxZ2twVFdkeEx1eE1tRWxOV0FqY09tMwpvYVNMR213cHNDaXNnMy9uQ093YklPWllvQWszTjRWOXlPdTNhNjdHZlY1czk2dzFCYlV3VC9aMHg4Q25Mc0RQCmtKYlBLeW9iM2dNalgyYWMvM0k0U205Z2d3T3BmdVczRTVSNHZtQlJVeFY1RnlUTkliaTErTDJqM2hDbTdVeEgKR0dTL0U1Z0FSUzNmYXlCSm9JS2NTMXNyR0tqbkZuelQ2Y2xhTlFJREFRQUJBb0lCQUJHR3pIODRNajRIUXl1YQo0Z2NTNlNpVTJ1MC9vTDZIdndvd0gwY0Ywa09wdGU0NjJJSGVTSXdOTEtmZVFHU1ZENXFNb216QVl1aE81SDAwCmp0eXM4TzJUVzV6bVg3STRwVk54R0toQ0psdDVvVkZuUHlvSmJZOUF0eTBaTVRqemVFUTE2T3A0L0pCRTFaVzcKWEloTHc3bmRaUUNqRW5HUjBNTFFnREVrQUFJOFdTVDNrN3hFeU9lZUJmWndmdlZlNTVBMFRzZHB4TW9TUGZoYgpUVG9TTkx0c0R0T2huM25jdmVkRjdhMjJUSi9xUElzNVpLYWZJRDE5aXltdEZuVG9CU3JTVnVuaTlSUnp4ZG05CmFveEU0alBJSUIrKzRmbTZQN21JOWlESFdrdzluQWtaN3g2bzN3MWtKcTdyNkdpbTJGTGs5b2N3enlOUzQ1Y0cKcGNBaHJERUNnWUVBd0hkTjRUdUxBMDU0TzYxZ0EzUG1hRjVMRDhjVCs2T1ZpN1dFaEFiYmZzcndBZzYwaThBVwppU0NhOHBLbXpta3drOXRCOXBYMjNrZmM3RDZFMk93NktQYWl2VkxzZVVFeVFENnlKU29HN1JOVGxkOHUyUEZsCk14a0k1a081QVdaRjRld1F2S2Y0U3BKSDcvSXE5Q2wzV2Fpd0ZNbE1POHV5VUd0SVpJZmFJVThDZ1lFQTl6ZmgKWm8rQWkyempTM0d5dXd0aFNRU2JjK3FkL3JZOHFFQ0FWSUNqRThhb0k3aGhMU0NMUGdtNmJmakwvWmx1bGYvbgprbzdFSEJ2bFJJaHpnOTBkeVVBQjhoZSttTDNqaXRNSnpYNDBvVmpFcUpHYUFMa0s3dUVPbW5KWTJLclVpTDYwCi9KUTIzVXY5NENVc0NnMS9KRUdBOHJUMFU3VHZyS0NCOHRSMFF6c0NnWUJKTkZlVDVwRGVSaGRuSTIrVWdKM1AKYnFZQUwwbERlaG5rVkxzOWVGbytKTFFiSkRxNXVPc1paeVJvUlMxYTd4bUI4M0JvZU91MzZmOTJmK1VKbVBnYQpJbzBOazUvTUV1Y3BGbSt0d1FsM1hOVjYrTE9aNGw4S2kyZ2VKUDRXTVM4OVdndVhwZy9EVlZZMVJwZmQzSE8vCnozQ0J4M3JPZDVDd0U4NHFKcDNwOHdLQmdRRGZXdnBubWlGdVZxdW8vd21YR25vRDZZaTFtdlN5SzEzME9ZcDQKVGx5SVFvU28rUzI3QXRzcTZza29FSS9sQ05tejVpZ0g3cnJhRm8zMmREM0JsbVlSN0tXVlg4U1E1WWNPWnd0RgpRTkEyTWloRGtJRU9SQ0RQb0VCOFkvRkhtRmc3VCtuZkJkM241SDkwSXNGK042RjJWVVEyaEN6Mjc5TlhLUkVmCkhyb0gvd0tCZ1FDQ2pFVEw5UXRkTC94SjlFVUtvZzgxOVVZaE8rTzdVSmtEUmNMbG1PMjErWGZmWDh5Q3pwQ2YKOS8zOFl1bDlHcU9OTGpYVmM2ejNKMTBDdjRPVi9LbnM1Yk5ya1VZRFhCcGJWMTF6bFFZQjEzUTN4QnNCZExSSAptWWtESHRlSEwxRmZQYTFNZkVhTnBaZGJuTlFKMXkzY0U4bENDWk5ucm02bC9LVXArWm92d2c9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
  kind: Secret
  metadata:
    annotations:
      cert-manager.io/alt-names: namecheap-webhook-cert-manager-webhook-namecheap,namecheap-webhook-cert-manager-webhook-namecheap.cert-manager,namecheap-webhook-cert-manager-webhook-namecheap.cert-manager.svc
      cert-manager.io/certificate-name: namecheap-webhook-cert-manager-webhook-namecheap-webhook-tls
      cert-manager.io/common-name: ""
      cert-manager.io/ip-sans: ""
      cert-manager.io/issuer-group: ""
      cert-manager.io/issuer-kind: ""
      cert-manager.io/issuer-name: namecheap-webhook-cert-manager-webhook-namecheap-ca
      cert-manager.io/uri-sans: ""
    creationTimestamp: "2025-07-16T22:28:59Z"
    labels:
      controller.cert-manager.io/fao: "true"
    name: namecheap-webhook-cert-manager-webhook-namecheap-webhook-tls
    namespace: cert-manager
    resourceVersion: "5912"
    uid: 48b11e33-807c-498e-89bc-359826f77012
  type: kubernetes.io/tls
- apiVersion: v1
  data:
    release: 
  kind: Secret
  metadata:
    creationTimestamp: "2025-07-16T22:18:07Z"
    labels:
      modifiedAt: "1752704306"
      name: cert-manager
      owner: helm
      status: deployed
      version: "1"
    name: sh.helm.release.v1.cert-manager.v1
    namespace: cert-manager
    resourceVersion: "4701"
    uid: 3874c0aa-718e-4ade-9947-e5efaac2b46d
  type: helm.sh/release.v1
- apiVersion: v1
  data:
    release: 
  kind: Secret
  metadata:
    creationTimestamp: "2025-07-16T22:28:54Z"
    labels:
      modifiedAt: "1752704934"
      name: namecheap-webhook
      owner: helm
      status: deployed
      version: "1"
    name: sh.helm.release.v1.namecheap-webhook.v1
    namespace: cert-manager
    resourceVersion: "5837"
    uid: 38ea1171-6c5d-4b36-855c-d84d375e2885
  type: helm.sh/release.v1
- apiVersion: v1
  data:
    tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZORENDQkJ5Z0F3SUJBZ0lTTEtsZzJzTjV0SWUvN2xOcVp1UlMxODczTUEwR0NTcUdTSWIzRFFFQkN3VUEKTUZveEN6QUpCZ05WQkFZVEFsVlRNU0F3SGdZRFZRUUtFeGNvVTFSQlIwbE9SeWtnVEdWMEozTWdSVzVqY25sdwpkREVwTUNjR0ExVUVBeE1nS0ZOVVFVZEpUa2NwSUZkaGJtNWhZbVVnVjJGMFpYSmpjbVZ6Y3lCU01URXdIaGNOCk1qVXdOekUyTWpFME56QXdXaGNOTWpVeE1ERTBNakUwTmpVNVdqQWdNUjR3SEFZRFZRUURFeFYwWlhOMExuTnMKWldWd2VTMXdkWEJ3ZVM1amIyMHdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDMgpQanl4ZFU3WTBodmxCaWpUNWVPRVdXUEFDbEtmMC9HWWNjai81SENDL0MyTVVWLy9nWmplZFhIZENub0hER01uCllxd0hBQTQ4U1RyUE1pQ2gzKy91RGxieHVyZnVBZEc3SzBGWWsxcy9KK1UrT2xqOFZFWXQvbUxHVGYvTHVqaFYKVm9ZQVVJN1FaTmkwdVNnRUtaSWRxYk1kbFE4YmNYaDJGRVFNRldzbWhTRHhNZXBabGNsUVJkQm9JRUJjbThuaQpUR2ljbVhrWnY3ajFrRmJjZW94TVRlT0htUVY2c0toOS9COStSM0thZmcrd1ZiSnpweEs2dEtQbVE3Znk3VTVnCjFPcGx5aktneUxITjFIN25YYWpZR1piTklIUG1SNGoyRVg0ckg4MWIzSlpocEFyK0VkcS9ieUlvc3ZHRzBLU2oKampnTDJocFdhclpxekZ6U2NzMW5BZ01CQUFHamdnSXNNSUlDS0RBT0JnTlZIUThCQWY4RUJBTUNCYUF3SFFZRApWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNQXdHQTFVZEV3RUIvd1FDTUFBd0hRWURWUjBPCkJCWUVGT2h3NGVPSVVuVlVJUko2R2tjTkEwTVpSQ05rTUI4R0ExVWRJd1FZTUJhQUZCUEwxL2F1bmZ4cFFtVFcKWEh3anpJWDVSOGUyTURjR0NDc0dBUVVGQndFQkJDc3dLVEFuQmdnckJnRUZCUWN3QW9ZYmFIUjBjRG92TDNOMApaeTF5TVRFdWFTNXNaVzVqY2k1dmNtY3ZNQ0FHQTFVZEVRUVpNQmVDRlhSbGMzUXVjMnhsWlhCNUxYQjFjSEI1CkxtTnZiVEFUQmdOVkhTQUVEREFLTUFnR0JtZUJEQUVDQVRBekJnTlZIUjhFTERBcU1DaWdKcUFraGlKb2RIUncKT2k4dmMzUm5MWEl4TVM1akxteGxibU55TG05eVp5OHhNakF1WTNKc01JSUJBZ1lLS3dZQkJBSFdlUUlFQWdTQgo4d1NCOEFEdUFIVUFLSFlhR0pBbisrODgwTllhQVkxMnNGQlhLY2VuUVJ2TXZmWUU5RjFDWVZNQUFBR1lGV29VCkJ3QUFCQU1BUmpCRUFpQXAySU13RkRqdm1wODY0SW9nT3JaSUZzQTlGWEV3c1NFd1E2QVNhRlN6YlFJZ1poTVkKNjBocUh0RlRJa2NYRGs4MkdOZ0QxUXNWckw2NnA3MlN3YkQrcGg0QWRRQ3d6SVBscGZsOWE2OThDY3dvU1FTSApLc2ZvaXhNc1kxQzN4djBtNFd4c2R3QUFBWmdWYWhQaEFBQUVBd0JHTUVRQ0lGK2xRMTQ3T3owUHkzZ2dhK2xyCnNFcG5wU3NSbVpPb3I4TktOMzNSb0taRkFpQWtIMjNFYkZoZTV0c3ZHVHN3MFZzVkdla2N0L3BtQTVMZnc2bFQKVHlxNWlqQU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFQZGJ3MlZ3MlNwck95cFdtbS9QR1FjeUIwSmw2N1EwbgpITzBrLy8wME9xQzBtQlpwQ0ZMSGh4UnpaMVI0ZzlnZldURG15T282YVIyK0tDUzROdkp6bU9JVURQM3FBSDZwCk1PaDFZa1JlTGhCSld6NWlPVndXdkZ6T0VyTEk5YW00cGRzNFgreXRlZ1hIeVRUNFIxZWFGd3Q4ekRtRmRCMDAKK3A3bDNHeFNEWk02dU1JUWtOYmVYbkQxR2I0dkdCMmZaNHoxbWVKeWlSZCtFcGR6VG9GTC9hbTdhRDVyd3ZJegpoNkRUcWtoSWlFLzc2TmljL3RrUG8wZzgzQnJxdHU2aUU5TCtTZnVnTmZwQllGTzNTeVhyaFJQOUovcEFCRDdsClVPL2k5SkpIcTdwbTFJT3VXUVYwWi8wU2g1WU8wOVRWR0hjS0E1TUV0WGI4cXFHa3lYUmxVZz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZUVENDQXpXZ0F3SUJBZ0lSQU9PdURpVmdRRnlBVGVnUE94Zk9hNUl3RFFZSktvWklodmNOQVFFTEJRQXcKWmpFTE1Ba0dBMVVFQmhNQ1ZWTXhNekF4QmdOVkJBb1RLaWhUVkVGSFNVNUhLU0JKYm5SbGNtNWxkQ0JUWldOMQpjbWwwZVNCU1pYTmxZWEpqYUNCSGNtOTFjREVpTUNBR0ExVUVBeE1aS0ZOVVFVZEpUa2NwSUZCeVpYUmxibVFnClVHVmhjaUJZTVRBZUZ3MHlOREF6TVRNd01EQXdNREJhRncweU56QXpNVEl5TXpVNU5UbGFNRm94Q3pBSkJnTlYKQkFZVEFsVlRNU0F3SGdZRFZRUUtFeGNvVTFSQlIwbE9SeWtnVEdWMEozTWdSVzVqY25sd2RERXBNQ2NHQTFVRQpBeE1nS0ZOVVFVZEpUa2NwSUZkaGJtNWhZbVVnVjJGMFpYSmpjbVZ6Y3lCU01URXdnZ0VpTUEwR0NTcUdTSWIzCkRRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRQ1ZZSHdlMmd4TXY5SmgvZDFCZ29jVzNhbTVFL2lCT3JMa3lFTmcKUnFMbVZsNnZOUlhnb0twUGp0UDQwTXYxN1oyTGxZaFJzbmVhSzlnZFNObU5UeEpsWTh2aXFzOWRrNFh3S0p4RApQZmwvdkpCVzRNL25KekZ3UzMwcXU3VkY4alNmeUY4MlE3S2tMbDVOeEozOVk1eXZRRnpIakwzWUNPOGNvTUc1CnY3MkREZ1d6Yys5d2sybmNvWGlCMy8zbVZnNFJ0RDF3MXhQcGRqdFNoNWtlQjdqcWduRDIvSTc1T0xCemFteTYKTkw5bmd1YUVjOGNYOENkbnBvQ0NRSTgvRno5cWhQdEpqUCtPL1JIQ3VnV1ZrU3B0dUNScmE4dGNuSlRHSFJpTgpyL0d5WXNIWlo0alo3NmhiSmp4YXB3ZjI0RThSQVZ6dU1Sc3cvblM2L2hVSjhscVBBZ01CQUFHamdnRUFNSUg5Ck1BNEdBMVVkRHdFQi93UUVBd0lCaGpBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFnWUlLd1lCQlFVSEF3RXcKRWdZRFZSMFRBUUgvQkFnd0JnRUIvd0lCQURBZEJnTlZIUTRFRmdRVUU4dlg5cTZkL0dsQ1pOWmNmQ1BNaGZsSAp4N1l3SHdZRFZSMGpCQmd3Rm9BVXRmTmw4djZ3Q3BJZit6eDk4MFNnckdNbHd4UXdOZ1lJS3dZQkJRVUhBUUVFCktqQW9NQ1lHQ0NzR0FRVUZCekFDaGhwb2RIUndPaTh2YzNSbkxYZ3hMbWt1YkdWdVkzSXViM0puTHpBVEJnTlYKSFNBRUREQUtNQWdHQm1lQkRBRUNBVEFyQmdOVkhSOEVKREFpTUNDZ0hxQWNoaHBvZEhSd09pOHZjM1JuTFhneApMbU11YkdWdVkzSXViM0puTHpBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQWdFQWVEOXB0NXNXdFhFUXlGOTRSTXpvCmxGK3VpcCtPRFlhTnhQRUpHLzkzeHR4UGM2UUMwYnNDOVFJZ3Y2ZEJrK3MxTFVmNXVsSWxKWlExVWxrTGdUSDQKSHpIaTM3TzRpdmNiU0hwSUxjZ0QwaEtuZnR2MEU4bzlTTkFhSWNPN0RLTm1iZVdRNmNQbGZPbFJ0cGNJWFlvYwo5NXdZOUFpcE4wL2tlbjVLeER4ZHhUU0t1V1M3QWUrWldoN2htTGRmRGM1Qzg1bzJvbUx2TS82T3ZtcDB4VVNQClUveEZSMWZrMGtSbU05NzVzbWVoRU9YU0hPSjI0ekZhWTZCbk1VV2E2N3lMYXdieFVqMEFxekdtb2hkcXo3THUKRGh0S2Q5b1hKZ1J6YWNGenVNU1FsdU4waXZ3S0l6aXJwTFIvQUpvejRuSFhJYURRUnlmYUEzanIxVllwSytiQQpwb0lYQWpneFIvdkVGdGJFSHc3Zk5PM0ZLUkNkZHZ5SjB2aCtPS0lyWTBucmJHVW95UmxQbEtGLzlYclEzVUpvClpjNzA4bUJCanpxaWpYZFVRMFRCMS9pckFBUTdPLzZpK1RoUXhFbHQ3N2dZV3p2Mi84c1NvYWd6cVJLWE9xTEoKY2tOSlFJQTM5dDRITUlGZ3F4RExSdVJOdG9vRlVlb092b2NEV1RRcjgwYlVwNjM1N2NCdEFsN3lwY096clBLNgptNWN1dXlaZlE3emRoNXVmY2ZNZEZiZ2p3ZmVOOGQ0NDJFekJuTHhvTUE5VDJJZ2ZuN0tPaEZsM3puWitXSmhTCmgrb3lCUzhQcktVS0IyWG85cG5YbWE2MTIzeHlGUERhcG51SzNpaU5wR0pmSTBzVUxDcWpFb2RZRythR3lmQ3oKWkZMV2Z0YlU2ODNZeFpDT2RkZ1l4SEk9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
    tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBdGo0OHNYVk8yTkliNVFZbzArWGpoRmxqd0FwU245UHhtSEhJLytSd2d2d3RqRkZmCi80R1kzblZ4M1FwNkJ3eGpKMktzQndBT1BFazZ6eklnb2QvdjdnNVc4YnEzN2dIUnV5dEJXSk5iUHlmbFBqcFkKL0ZSR0xmNWl4azMveTdvNFZWYUdBRkNPMEdUWXRMa29CQ21TSGFtekhaVVBHM0Y0ZGhSRURCVnJKb1VnOFRIcQpXWlhKVUVYUWFDQkFYSnZKNGt4b25KbDVHYis0OVpCVzNIcU1URTNqaDVrRmVyQ29mZndmZmtkeW1uNFBzRld5CmM2Y1N1clNqNWtPMzh1MU9ZTlRxWmNveW9NaXh6ZFIrNTEybzJCbVd6U0J6NWtlSTloRitLeC9OVzl5V1lhUUsKL2hIYXYyOGlLTEx4aHRDa280NDRDOW9hVm1xMmFzeGMwbkxOWndJREFRQUJBb0lCQUQwM1BxL2xWYXpqTnRlQgpjQ2x0YVRWRnlZbnliYnFlT09NYUpZZy9OY1BwN1dyYTBzSkN5QlRCb3BPN055NHk3UU9IMDMwdWVabXFoNFNkCnMvUnNBbTRXaHdILzFGU3dhOERSVU12dUE1SjlWalhHNTZrcXJjQTVXUGgvcnRMQ0pMWVZzRUZlemZvV1JleSsKM1VBNHJvb2tQTFJOSTV2MlM1NXVSRVZDMUpGRlNLYlZjSHFGMzN1ci9hRmcvSXBON2Uxa3c1S0JadnBZRS9CawpoWFdBMnY5Mnkzdm85NGhWUEQ5ZVNTeHNDV3R4KzB1STlGd1FudzQ4WmVFcG5kZ2ZCcFl0VTlkQVlUZ2hhbzFnCk1yV1BlMEE4STlYMWZWbFFKNTJUbHJCbnQrUGRlSnBFZkdCL1VQRng0Y3F1bVEzWmp1NksrYnRBWnhKQ1UyNGkKZGFZWExpRUNnWUVBOHRDdzEwaFNjZlIvZUg5MUFHaEV0NGZuV2JkL0hyWUZOZm5UanErcWFjSnJLeFZtcHlVTgorS3lRbWVxQ1ZEcDJ3d0xDMUg5UTA2YkdMb01hN3IrT2RSaVI5Tys0dmFXelB3OE8wYVlVVEJIVndsTnVYci8yClFZSzBZL1FDZkx1cldPSG1zMWhuZU9oWEIza3pTRWQ2SWlWcm9yc0lMbk9vaWdJVStUaVBjaThDZ1lFQXdDT00KeC8zRTBXdmdHUmkyY0JWV2NPZUtBUGpRZC9vQ1RqcVpKd3M1bEoxeXJSQ1Q5eG5JcnZsSEk5ekpLdGp1SURibwpxcTZmR2JjMVh1RDNvVmJ4N0hUQlJiMm5UV1BPak5UVjBSa3FHQ1RFM1RnZHVuVXE2bjNvcFptaFhybVMvT1E1CmRtSDNIZGt6ZHVXTHFrL2o5SkpZNlJ5QzZSWk9HTVlsRFg1dklra0NnWUVBc2NCa05MVVU1YWIreWM5RWI0L2sKL2hYWEhxNWR1TFczQ3RSZ01zd1dER1h1M2hORW1vZGR1dlZZeGRRT3BHcElGbW9uQmpoTml5TkRZVGxJdGc0MAowek94WllVMzBGMUU0cHk3Vkc0bjNhZ1F1N2tueXVUcitQa2Q1UzN6eEN2K080cmp2OWF2cUtzdFNxTkhEMXFECjVndE95RW55cTA2dnlwZkxrc1g4L0xFQ2dZQUxFNEdRSGQ3MHU2VkZqUmtuU1BPY3VweElCZy91ZXFrYlhXRnEKME1qVyttU2IrWEt1TWZ4UnFla2g5aDVhcS9xK1BLd1krc3dOTFhTVUxaL1kyeXhERjAvMDkwUG53RE11Qnk3MApTT0VXVnpoS0VHd1dUWjdWdWNCcG0zdWovRXF1N1hFcWsrY3MvMUpxTGoxbzZnWVlHVCtxNEl2alovZkVrZGVjCitZYnFrUUtCZ1FDdjIyUjVnTnpGMnJ1TXFDbWgzY0xZRlRsck9McGU5d3Z3YjdKbVFoK3BtNzh3aUFhbjdFNnAKYVVTS2ZjYnlPSU9jcXVjSG1xZ01JYUc0aEk3Z0pWRFhTd2tQUVFQYjRuQnlkYmk5azVSNkhrazdNZU9rV2dlRQpHS0JSdjBOSnBYbHZxMTN3MStlZ3lRV05veEpmSGhjOVN2N0t2RlJkdVBvNXJCSUZwU3NvWFE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
  kind: Secret
  metadata:
    annotations:
      cert-manager.io/alt-names: test.sleepy-puppy.com
      cert-manager.io/certificate-name: test-sleepy-puppy-cert
      cert-manager.io/common-name: test.sleepy-puppy.com
      cert-manager.io/ip-sans: ""
      cert-manager.io/issuer-group: ""
      cert-manager.io/issuer-kind: ClusterIssuer
      cert-manager.io/issuer-name: letsencrypt-staging
      cert-manager.io/uri-sans: ""
    creationTimestamp: "2025-07-16T22:45:33Z"
    labels:
      controller.cert-manager.io/fao: "true"
    name: test-sleepy-puppy-tls
    namespace: cert-manager
    resourceVersion: "7841"
    uid: e288b482-3988-4a6f-9175-3973affdec97
  type: kubernetes.io/tls
kind: List
metadata:
  resourceVersion: ""
apiVersion: v1
items:
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: 7f6b66050de23cea379a380d5e37cb47134a3ca7d4ee1c0348fed29a85181173
      cni.projectcalico.org/podIP: 10.244.89.197/32
      cni.projectcalico.org/podIPs: 10.244.89.197/32
    creationTimestamp: "2025-07-16T22:30:10Z"
    generateName: namecheap-webhook-cert-manager-webhook-namecheap-56cc5fd59d-
    labels:
      app: cert-manager-webhook-namecheap
      pod-template-hash: 56cc5fd59d
      release: namecheap-webhook
    name: namecheap-webhook-cert-manager-webhook-namecheap-56cc5fd59vw6wg
    namespace: cert-manager
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: namecheap-webhook-cert-manager-webhook-namecheap-56cc5fd59d
      uid: 57adbc65-7258-422e-8a86-e7a37c12f7b0
    resourceVersion: "6133"
    uid: 8981fb70-96e1-42fa-9c17-fa48252ac785
  spec:
    containers:
    - args:
      - --tls-cert-file=/tls/tls.crt
      - --tls-private-key-file=/tls/tls.key
      env:
      - name: GROUP_NAME
        value: acme.sleepy-puppy.com
      image: ghcr.io/extrality/cert-manager-webhook-namecheap:v0.3.1
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: https
          scheme: HTTPS
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: cert-manager-webhook-namecheap
      ports:
      - containerPort: 443
        name: https
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: https
          scheme: HTTPS
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /tls
        name: certs
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-7p745
        readOnly: true
    dnsConfig:
      nameservers:
      - 1.1.1.1
      - 8.8.8.8
    dnsPolicy: None
    enableServiceLinks: true
    nodeName: taygete
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: namecheap-webhook-cert-manager-webhook-namecheap
    serviceAccountName: namecheap-webhook-cert-manager-webhook-namecheap
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: certs
      secret:
        defaultMode: 420
        secretName: namecheap-webhook-cert-manager-webhook-namecheap-webhook-tls
    - name: kube-api-access-7p745
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-07-16T22:30:12Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-07-16T22:30:10Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-07-16T22:30:13Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-07-16T22:30:13Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-07-16T22:30:10Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://39913078c1527af95cc4fff1785eca6985946274b3dc978c4d5bb9157ed73f73
      image: ghcr.io/extrality/cert-manager-webhook-namecheap:v0.3.1
      imageID: ghcr.io/extrality/cert-manager-webhook-namecheap@sha256:e3552fa0c68a98262303d3c14070b7300075e7b420d6705429646685510a334b
      lastState: {}
      name: cert-manager-webhook-namecheap
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-07-16T22:30:12Z"
    hostIP: 192.168.11.12
    hostIPs:
    - ip: 192.168.11.12
    phase: Running
    podIP: 10.244.89.197
    podIPs:
    - ip: 10.244.89.197
    qosClass: BestEffort
    startTime: "2025-07-16T22:30:10Z"
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: namecheap-webhook
      meta.helm.sh/release-namespace: cert-manager
    creationTimestamp: "2025-07-16T22:28:54Z"
    labels:
      app: cert-manager-webhook-namecheap
      app.kubernetes.io/managed-by: Helm
      chart: cert-manager-webhook-namecheap-0.2.2
      heritage: Helm
      release: namecheap-webhook
    name: namecheap-webhook-cert-manager-webhook-namecheap
    namespace: cert-manager
    resourceVersion: "5822"
    uid: 2778fea2-341f-4508-8d57-bde5f97c6042
  spec:
    clusterIP: 10.105.79.151
    clusterIPs:
    - 10.105.79.151
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: https
      port: 443
      protocol: TCP
      targetPort: https
    selector:
      app: cert-manager-webhook-namecheap
      release: namecheap-webhook
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "2"
      meta.helm.sh/release-name: namecheap-webhook
      meta.helm.sh/release-namespace: cert-manager
    creationTimestamp: "2025-07-16T22:28:54Z"
    generation: 2
    labels:
      app: cert-manager-webhook-namecheap
      app.kubernetes.io/managed-by: Helm
      chart: cert-manager-webhook-namecheap-0.2.2
      heritage: Helm
      release: namecheap-webhook
    name: namecheap-webhook-cert-manager-webhook-namecheap
    namespace: cert-manager
    resourceVersion: "6147"
    uid: 20256b26-244c-46a2-8049-5ca18e8e8f0b
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: cert-manager-webhook-namecheap
        release: namecheap-webhook
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: cert-manager-webhook-namecheap
          release: namecheap-webhook
      spec:
        containers:
        - args:
          - --tls-cert-file=/tls/tls.crt
          - --tls-private-key-file=/tls/tls.key
          env:
          - name: GROUP_NAME
            value: acme.sleepy-puppy.com
          image: ghcr.io/extrality/cert-manager-webhook-namecheap:v0.3.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: https
              scheme: HTTPS
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: cert-manager-webhook-namecheap
          ports:
          - containerPort: 443
            name: https
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: https
              scheme: HTTPS
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tls
            name: certs
            readOnly: true
        dnsConfig:
          nameservers:
          - 1.1.1.1
          - 8.8.8.8
        dnsPolicy: None
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: namecheap-webhook-cert-manager-webhook-namecheap
        serviceAccountName: namecheap-webhook-cert-manager-webhook-namecheap
        terminationGracePeriodSeconds: 30
        volumes:
        - name: certs
          secret:
            defaultMode: 420
            secretName: namecheap-webhook-cert-manager-webhook-namecheap-webhook-tls
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2025-07-16T22:29:05Z"
      lastUpdateTime: "2025-07-16T22:29:05Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2025-07-16T22:28:54Z"
      lastUpdateTime: "2025-07-16T22:30:13Z"
      message: ReplicaSet "namecheap-webhook-cert-manager-webhook-namecheap-56cc5fd59d"
        has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 2
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "2"
      meta.helm.sh/release-name: namecheap-webhook
      meta.helm.sh/release-namespace: cert-manager
    creationTimestamp: "2025-07-16T22:30:10Z"
    generation: 1
    labels:
      app: cert-manager-webhook-namecheap
      pod-template-hash: 56cc5fd59d
      release: namecheap-webhook
    name: namecheap-webhook-cert-manager-webhook-namecheap-56cc5fd59d
    namespace: cert-manager
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: namecheap-webhook-cert-manager-webhook-namecheap
      uid: 20256b26-244c-46a2-8049-5ca18e8e8f0b
    resourceVersion: "6134"
    uid: 57adbc65-7258-422e-8a86-e7a37c12f7b0
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: cert-manager-webhook-namecheap
        pod-template-hash: 56cc5fd59d
        release: namecheap-webhook
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: cert-manager-webhook-namecheap
          pod-template-hash: 56cc5fd59d
          release: namecheap-webhook
      spec:
        containers:
        - args:
          - --tls-cert-file=/tls/tls.crt
          - --tls-private-key-file=/tls/tls.key
          env:
          - name: GROUP_NAME
            value: acme.sleepy-puppy.com
          image: ghcr.io/extrality/cert-manager-webhook-namecheap:v0.3.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: https
              scheme: HTTPS
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: cert-manager-webhook-namecheap
          ports:
          - containerPort: 443
            name: https
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: https
              scheme: HTTPS
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tls
            name: certs
            readOnly: true
        dnsConfig:
          nameservers:
          - 1.1.1.1
          - 8.8.8.8
        dnsPolicy: None
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: namecheap-webhook-cert-manager-webhook-namecheap
        serviceAccountName: namecheap-webhook-cert-manager-webhook-namecheap
        terminationGracePeriodSeconds: 30
        volumes:
        - name: certs
          secret:
            defaultMode: 420
            secretName: namecheap-webhook-cert-manager-webhook-namecheap-webhook-tls
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: namecheap-webhook
      meta.helm.sh/release-namespace: cert-manager
    creationTimestamp: "2025-07-16T22:28:54Z"
    generation: 2
    labels:
      app: cert-manager-webhook-namecheap
      pod-template-hash: 6fc75c6cf7
      release: namecheap-webhook
    name: namecheap-webhook-cert-manager-webhook-namecheap-6fc75c6cf7
    namespace: cert-manager
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: namecheap-webhook-cert-manager-webhook-namecheap
      uid: 20256b26-244c-46a2-8049-5ca18e8e8f0b
    resourceVersion: "6146"
    uid: cef94de5-1f5c-42d3-8233-7fbfffa93a66
  spec:
    replicas: 0
    selector:
      matchLabels:
        app: cert-manager-webhook-namecheap
        pod-template-hash: 6fc75c6cf7
        release: namecheap-webhook
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: cert-manager-webhook-namecheap
          pod-template-hash: 6fc75c6cf7
          release: namecheap-webhook
      spec:
        containers:
        - args:
          - --tls-cert-file=/tls/tls.crt
          - --tls-private-key-file=/tls/tls.key
          env:
          - name: GROUP_NAME
            value: acme.sleepy-puppy.com
          image: ghcr.io/extrality/cert-manager-webhook-namecheap:v0.3.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: https
              scheme: HTTPS
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: cert-manager-webhook-namecheap
          ports:
          - containerPort: 443
            name: https
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: https
              scheme: HTTPS
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tls
            name: certs
            readOnly: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: namecheap-webhook-cert-manager-webhook-namecheap
        serviceAccountName: namecheap-webhook-cert-manager-webhook-namecheap
        terminationGracePeriodSeconds: 30
        volumes:
        - name: certs
          secret:
            defaultMode: 420
            secretName: namecheap-webhook-cert-manager-webhook-namecheap-webhook-tls
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    annotations:
      meta.helm.sh/release-name: namecheap-webhook
      meta.helm.sh/release-namespace: cert-manager
    creationTimestamp: "2025-07-16T22:28:54Z"
    labels:
      app: cert-manager-webhook-namecheap
      app.kubernetes.io/managed-by: Helm
      chart: cert-manager-webhook-namecheap-0.2.2
      heritage: Helm
      release: namecheap-webhook
    name: namecheap-webhook-cert-manager-webhook-namecheap
    namespace: cert-manager
    resourceVersion: "5814"
    uid: 1fa6142e-0f57-467b-b931-58d1919460c3
kind: List
metadata:
  resourceVersion: ""
